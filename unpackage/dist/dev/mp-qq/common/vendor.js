(global["webpackJsonp"]=global["webpackJsonp"]||[]).push([["common/vendor"],{1:
/*!********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-qq/dist/index.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createApp=wt,t.createComponent=jt,t.createPage=xt,t.default=void 0;var r=o(n(/*! vue */2));function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){return l(e)||u(e,t)||h(e,t)||c()}function c(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function u(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done);r=!0)if(n.push(a.value),t&&n.length===t)break}catch(c){o=!0,i=c}finally{try{r||null==s["return"]||s["return"]()}finally{if(o)throw i}}return n}}function l(e){if(Array.isArray(e))return e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e){return y(e)||v(e)||h(e)||d()}function d(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function h(e,t){if(e){if("string"===typeof e)return g(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(e,t):void 0}}function v(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function y(e){if(Array.isArray(e))return g(e)}function g(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var _=Object.prototype.toString,m=Object.prototype.hasOwnProperty;function b(e){return"function"===typeof e}function w(e){return"string"===typeof e}function O(e){return"[object Object]"===_.call(e)}function k(e,t){return m.call(e,t)}function A(){}function S(e){var t=Object.create(null);return function(n){var r=t[n];return r||(t[n]=e(n))}}var E=/-(\w)/g,T=S((function(e){return e.replace(E,(function(e,t){return t?t.toUpperCase():""}))})),P=["invoke","success","fail","complete","returnValue"],x={},j={};function $(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?I(n):n}function I(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}function C(e,t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}function N(e,t){Object.keys(t).forEach((function(n){-1!==P.indexOf(n)&&b(t[n])&&(e[n]=$(e[n],t[n]))}))}function D(e,t){e&&t&&Object.keys(t).forEach((function(n){-1!==P.indexOf(n)&&b(t[n])&&C(e[n],t[n])}))}function R(e,t){"string"===typeof e&&O(t)?N(j[e]||(j[e]={}),t):O(e)&&N(x,e)}function M(e,t){"string"===typeof e?O(t)?D(j[e],t):delete j[e]:O(e)&&D(x,e)}function U(e){return function(t){return e(t)||t}}function q(e){return!!e&&("object"===typeof e||"function"===typeof e)&&"function"===typeof e.then}function L(e,t){for(var n=!1,r=0;r<e.length;r++){var o=e[r];if(n)n=Promise.resolve(U(o));else{var i=o(t);if(q(i)&&(n=Promise.resolve(i)),!1===i)return{then:function(){}}}}return n||{then:function(e){return e(t)}}}function F(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return["success","fail","complete"].forEach((function(n){if(Array.isArray(e[n])){var r=t[n];t[n]=function(t){L(e[n],t).then((function(e){return b(r)&&r(e)||e}))}}})),t}function K(e,t){var n=[];Array.isArray(x.returnValue)&&n.push.apply(n,p(x.returnValue));var r=j[e];return r&&Array.isArray(r.returnValue)&&n.push.apply(n,p(r.returnValue)),n.forEach((function(e){t=e(t)||t})),t}function V(e){var t=Object.create(null);Object.keys(x).forEach((function(e){"returnValue"!==e&&(t[e]=x[e].slice())}));var n=j[e];return n&&Object.keys(n).forEach((function(e){"returnValue"!==e&&(t[e]=(t[e]||[]).concat(n[e]))})),t}function B(e,t,n){for(var r=arguments.length,o=new Array(r>3?r-3:0),i=3;i<r;i++)o[i-3]=arguments[i];var a=V(e);if(a&&Object.keys(a).length){if(Array.isArray(a.invoke)){var s=L(a.invoke,n);return s.then((function(e){return t.apply(void 0,[F(a,e)].concat(o))}))}return t.apply(void 0,[F(a,n)].concat(o))}return t.apply(void 0,[n].concat(o))}var H={returnValue:function(e){return q(e)?e.then((function(e){return e[1]})).catch((function(e){return e[0]})):e}},G=/^\$|sendNativeEvent|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/,z=/^create|Manager$/,Y=["createBLEConnection"],W=["createBLEConnection"],J=/^on|^off/;function X(e){return z.test(e)&&-1===Y.indexOf(e)}function Q(e){return G.test(e)&&-1===W.indexOf(e)}function Z(e){return J.test(e)&&"onPush"!==e}function ee(e){return e.then((function(e){return[null,e]})).catch((function(e){return[e]}))}function te(e){return!(X(e)||Q(e)||Z(e))}function ne(e,t){return te(e)?function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return b(n.success)||b(n.fail)||b(n.complete)?K(e,B.apply(void 0,[e,t,n].concat(o))):K(e,ee(new Promise((function(r,i){B.apply(void 0,[e,t,Object.assign({},n,{success:r,fail:i})].concat(o))}))))}:t}Promise.prototype.finally||(Promise.prototype.finally=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){throw n}))}))});var re=1e-4,oe=750,ie=!1,ae=0,se=0;function ce(){var e=wx.getSystemInfoSync(),t=e.platform,n=e.pixelRatio,r=e.windowWidth;ae=r,se=n,ie="ios"===t}function ue(e,t){if(0===ae&&ce(),e=Number(e),0===e)return 0;var n=e/oe*(t||ae);return n<0&&(n=-n),n=Math.floor(n+re),0===n&&(n=1!==se&&ie?.5:1),e<0?-n:n}var le={promiseInterceptor:H},fe=Object.freeze({__proto__:null,upx2px:ue,addInterceptor:R,removeInterceptor:M,interceptors:le}),pe={args:function(e){var t=parseInt(e.current);if(!isNaN(t)){var n=e.urls;if(Array.isArray(n)){var r=n.length;if(r)return t<0?t=0:t>=r&&(t=r-1),t>0?(e.current=n[t],e.urls=n.filter((function(e,r){return!(r<t)||e!==n[t]}))):e.current=n[0],{indicator:!1,loop:!1}}}}},de={previewImage:pe},he=["preloadPage","unPreloadPage","loadSubPackage"],ve=["scanCode","startAccelerometer","stopAccelerometer","onAccelerometerChange","startCompass","onCompassChange","setScreenBrightness","getScreenBrightness","setKeepScreenOn","onUserCaptureScreen","vibrateLong","vibrateShort","createWorker","connectSocket","onSocketOpen","onSocketError","sendSocketMessage","onSocketMessage","closeSocket","onSocketClose","openDocument","updateShareMenu","getShareInfo","createLivePlayerContext","createLivePusherContext","setNavigationBarColor","onMemoryWarning","onNetworkStatusChange","reportMonitor","getLogManager","reportAnalytics"],ye=["success","fail","cancel","complete"];function ge(e,t,n){return function(r){return t(me(e,r,n))}}function _e(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(O(t)){var i=!0===o?t:{};for(var a in b(n)&&(n=n(t,i)||{}),t)if(k(n,a)){var s=n[a];b(s)&&(s=s(t[a],t,i)),s?w(s)?i[s]=t[a]:O(s)&&(i[s.name?s.name:a]=s.value):console.warn("QQ小程序 ".concat(e,"暂不支持").concat(a))}else-1!==ye.indexOf(a)?b(t[a])&&(i[a]=ge(e,t[a],r)):o||(i[a]=t[a]);return i}return b(t)&&(t=ge(e,t,r)),t}function me(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return b(de.returnValue)&&(t=de.returnValue(e,t)),_e(e,t,n,{},r)}function be(e,t){if(k(de,e)){var n=de[e];return n?function(t,r){var o=n;b(n)&&(o=n(t)),t=_e(e,t,o.args,o.returnValue);var i=[t];"undefined"!==typeof r&&i.push(r);var a=wx[o.name||e].apply(wx,i);return Q(e)?me(e,a,o.returnValue,X(e)):a}:function(){console.error("QQ小程序 暂不支持".concat(e))}}return t}var we=Object.create(null),Oe=["onTabBarMidButtonTap","subscribePush","unsubscribePush","onPush","offPush","share"];function ke(e){return function(t){var n=t.fail,r=t.complete,o={errMsg:"".concat(e,":fail:暂不支持 ").concat(e," 方法")};b(n)&&n(o),b(r)&&r(o)}}Oe.forEach((function(e){we[e]=ke(e)}));var Ae={oauth:["qq"],share:["qq"],payment:["qqpay"],push:["qq"]};function Se(e){var t=e.service,n=e.success,r=e.fail,o=e.complete,i=!1;Ae[t]?(i={errMsg:"getProvider:ok",service:t,provider:Ae[t]},b(n)&&n(i)):(i={errMsg:"getProvider:fail:服务["+t+"]不存在"},b(r)&&r(i)),b(o)&&o(i)}var Ee=Object.freeze({__proto__:null,getProvider:Se}),Te=function(){var e;return function(){return e||(e=new r.default),e}}();function Pe(e,t,n){return e[t].apply(e,n)}function xe(){return Pe(Te(),"$on",Array.prototype.slice.call(arguments))}function je(){return Pe(Te(),"$off",Array.prototype.slice.call(arguments))}function $e(){return Pe(Te(),"$once",Array.prototype.slice.call(arguments))}function Ie(){return Pe(Te(),"$emit",Array.prototype.slice.call(arguments))}var Ce=Object.freeze({__proto__:null,$on:xe,$off:je,$once:$e,$emit:Ie}),Ne=Object.freeze({__proto__:null}),De=Page,Re=Component,Me=/:/g,Ue=S((function(e){return T(e.replace(Me,"-"))}));function qe(e){var t=e.triggerEvent;e.triggerEvent=function(n){for(var r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return t.apply(e,[Ue(n)].concat(o))}}function Le(e,t){var n=t[e];t[e]=n?function(){qe(this);for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.apply(this,t)}:function(){qe(this)}}Page=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Le("onLoad",e),De(e)},Component=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Le("created",e),Re(e)};var Fe=["onPullDownRefresh","onReachBottom","onAddToFavorites","onShareTimeline","onShareAppMessage","onPageScroll","onResize","onTabItemTap"];function Ke(e,t){var n=e.$mp[e.mpType];t.forEach((function(t){k(n,t)&&(e[t]=n[t])}))}function Ve(e,t){if(!t)return!0;if(r.default.options&&Array.isArray(r.default.options[e]))return!0;if(t=t.default||t,b(t))return!!b(t.extendOptions[e])||!!(t.super&&t.super.options&&Array.isArray(t.super.options[e]));if(b(t[e]))return!0;var n=t.mixins;return Array.isArray(n)?!!n.find((function(t){return Ve(e,t)})):void 0}function Be(e,t,n){t.forEach((function(t){Ve(t,n)&&(e[t]=function(e){return this.$vm&&this.$vm.__call_hook(t,e)})}))}function He(e,t){var n;return t=t.default||t,n=b(t)?t:e.extend(t),t=n.options,[n,t]}function Ge(e,t){if(Array.isArray(t)&&t.length){var n=Object.create(null);t.forEach((function(e){n[e]=!0})),e.$scopedSlots=e.$slots=n}}function ze(e,t){e=(e||"").split(",");var n=e.length;1===n?t._$vueId=e[0]:2===n&&(t._$vueId=e[0],t._$vuePid=e[1])}function Ye(e,t){var n=e.data||{},r=e.methods||{};if("function"===typeof n)try{n=n.call(t)}catch(o){Object({VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG&&console.warn("根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。",n)}else try{n=JSON.parse(JSON.stringify(n))}catch(o){}return O(n)||(n={}),Object.keys(r).forEach((function(e){-1!==t.__lifecycle_hooks__.indexOf(e)||k(n,e)||(n[e]=r[e])})),n}var We=[String,Number,Boolean,Object,Array,null];function Je(e){return function(t,n){this.$vm&&(this.$vm[e]=t)}}function Xe(e,t){var n=e.behaviors,r=e.extends,o=e.mixins,i=e.props;i||(e.props=i=[]);var a=[];return Array.isArray(n)&&n.forEach((function(e){a.push(e.replace("uni://","wx".concat("://"))),"uni://form-field"===e&&(Array.isArray(i)?(i.push("name"),i.push("value")):(i.name={type:String,default:""},i.value={type:[String,Number,Boolean,Array,Object,Date],default:""}))})),O(r)&&r.props&&a.push(t({properties:Ze(r.props,!0)})),Array.isArray(o)&&o.forEach((function(e){O(e)&&e.props&&a.push(t({properties:Ze(e.props,!0)}))})),a}function Qe(e,t,n,r){return Array.isArray(t)&&1===t.length?t[0]:t}function Ze(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],{});return t||(n.vueId={type:String,value:""},n.generic={type:Object,value:null},n.vueSlots={type:null,value:[],observer:function(e,t){var n=Object.create(null);e.forEach((function(e){n[e]=!0})),this.setData({$slots:n})}}),Array.isArray(e)?e.forEach((function(e){n[e]={type:null,observer:Je(e)}})):O(e)&&Object.keys(e).forEach((function(t){var r=e[t];if(O(r)){var o=r.default;b(o)&&(o=o()),r.type=Qe(t,r.type),n[t]={type:-1!==We.indexOf(r.type)?r.type:null,value:o,observer:Je(t)}}else{var i=Qe(t,r);n[t]={type:-1!==We.indexOf(i)?i:null,observer:Je(t)}}})),n}function et(e){try{e.mp=JSON.parse(JSON.stringify(e))}catch(t){}return e.stopPropagation=A,e.preventDefault=A,e.target=e.target||{},k(e,"detail")||(e.detail={}),k(e,"markerId")&&(e.detail="object"===typeof e.detail?e.detail:{},e.detail.markerId=e.markerId),O(e.detail)&&(e.target=Object.assign({},e.target,e.detail)),e}function tt(e,t){var n=e;return t.forEach((function(t){var r=t[0],o=t[2];if(r||"undefined"!==typeof o){var i,a=t[1],s=t[3];Number.isInteger(r)?i=r:r?"string"===typeof r&&r&&(i=0===r.indexOf("#s#")?r.substr(3):e.__get_value(r,n)):i=n,Number.isInteger(i)?n=o:a?Array.isArray(i)?n=i.find((function(t){return e.__get_value(a,t)===o})):O(i)?n=Object.keys(i).find((function(t){return e.__get_value(a,i[t])===o})):console.error("v-for 暂不支持循环数据：",i):n=i[o],s&&(n=e.__get_value(s,n))}})),n}function nt(e,t,n){var r={};return Array.isArray(t)&&t.length&&t.forEach((function(t,o){"string"===typeof t?t?"$event"===t?r["$"+o]=n:"arguments"===t?n.detail&&n.detail.__args__?r["$"+o]=n.detail.__args__:r["$"+o]=[n]:0===t.indexOf("$event.")?r["$"+o]=e.__get_value(t.replace("$event.",""),n):r["$"+o]=e.__get_value(t):r["$"+o]=e:r["$"+o]=tt(e,t)})),r}function rt(e){for(var t={},n=1;n<e.length;n++){var r=e[n];t[r[0]]=r[1]}return t}function ot(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,a=!1;if(o&&(a=t.currentTarget&&t.currentTarget.dataset&&"wx"===t.currentTarget.dataset.comType,!n.length))return a?[t]:t.detail.__args__||t.detail;var s=nt(e,r,t),c=[];return n.forEach((function(e){"$event"===e?"__set_model"!==i||o?o&&!a?c.push(t.detail.__args__[0]):c.push(t):c.push(t.target.value):Array.isArray(e)&&"o"===e[0]?c.push(rt(e)):"string"===typeof e&&k(s,e)?c.push(s[e]):c.push(e)})),c}var it="~",at="^";function st(e,t){return e===t||"regionchange"===t&&("begin"===e||"end"===e)}function ct(e){var t=e.$parent;while(t&&t.$parent&&(t.$options.generic||t.$parent.$options.generic||t.$scope._$vuePid))t=t.$parent;return t&&t.$parent}function ut(e){var t=this;e=et(e);var n=(e.currentTarget||e.target).dataset;if(!n)return console.warn("事件信息不存在");var r=n.eventOpts||n["event-opts"];if(!r)return console.warn("事件信息不存在");var o=e.type,i=[];return r.forEach((function(n){var r=n[0],a=n[1],s=r.charAt(0)===at;r=s?r.slice(1):r;var c=r.charAt(0)===it;r=c?r.slice(1):r,a&&st(o,r)&&a.forEach((function(n){var r=n[0];if(r){var o=t.$vm;if(o.$options.generic&&(o=ct(o)||o),"$emit"===r)return void o.$emit.apply(o,ot(t.$vm,e,n[1],n[2],s,r));var a=o[r];if(!b(a))throw new Error(" _vm.".concat(r," is not a function"));if(c){if(a.once)return;a.once=!0}var u=ot(t.$vm,e,n[1],n[2],s,r)||[];i.push(a.apply(o,u.concat([,,,,,,,,,,e])))}}))})),"input"===o&&1===i.length&&"undefined"!==typeof i[0]?i[0]:void 0}var lt=["onShow","onHide","onError","onPageNotFound","onThemeChange","onUnhandledRejection"];function ft(e,t){var n=t.mocks,o=t.initRefs;e.$options.store&&(r.default.prototype.$store=e.$options.store),r.default.prototype.mpHost="mp-qq",r.default.mixin({beforeCreate:function(){this.$options.mpType&&(this.mpType=this.$options.mpType,this.$mp=f({data:{}},this.mpType,this.$options.mpInstance),this.$scope=this.$options.mpInstance,delete this.$options.mpType,delete this.$options.mpInstance,"app"!==this.mpType&&(o(this),Ke(this,n)))}});var i={onLaunch:function(t){this.$vm||(wx.canIUse("nextTick")||console.error("当前微信基础库版本过低，请将 微信开发者工具-详情-项目设置-调试基础库版本 更换为`2.3.0`以上"),this.$vm=e,this.$vm.$mp={app:this},this.$vm.$scope=this,this.$vm.globalData=this.globalData,this.$vm._isMounted=!0,this.$vm.__call_hook("mounted",t),this.$vm.__call_hook("onLaunch",t))}};i.globalData=e.$options.globalData||{};var a=e.$options.methods;return a&&Object.keys(a).forEach((function(e){i[e]=a[e]})),Be(i,lt),i}var pt=["__route__","__wxExparserNodeId__","__wxWebviewId__"];function dt(e,t){for(var n,r=e.$children,o=r.length-1;o>=0;o--){var i=r[o];if(i.$scope._$vueId===t)return i}for(var a=r.length-1;a>=0;a--)if(n=dt(r[a],t),n)return n}function ht(e){return Behavior(e)}function vt(){return!!this.route}function yt(e){this.triggerEvent("__l",e)}function gt(e){var t=e.$scope;Object.defineProperty(e,"$refs",{get:function(){var e={},n=t.selectAllComponents(".vue-ref");n.forEach((function(t){var n=t.dataset.ref;e[n]=t.$vm||t}));var r=t.selectAllComponents(".vue-ref-in-for");return r.forEach((function(t){var n=t.dataset.ref;e[n]||(e[n]=[]),e[n].push(t.$vm||t)})),e}})}function _t(e){var t,n=e.detail||e.value,r=n.vuePid,o=n.vueOptions;r&&(t=dt(this.$vm,r)),t||(t=this.$vm),o.parent=t}function mt(e){return ft(e,{mocks:pt,initRefs:gt})}function bt(e){return mt(e)}function wt(e){return App(bt(e)),e}function Ot(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.isPage,o=t.initRelation,i=He(r.default,e),c=s(i,2),u=c[0],l=c[1],f=a({multipleSlots:!0,addGlobalClass:!0},l.options||{});l["mp-weixin"]&&l["mp-weixin"].options&&Object.assign(f,l["mp-weixin"].options);var p={options:f,data:Ye(l,r.default.prototype),behaviors:Xe(l,ht),properties:Ze(l.props,!1,l.__file),lifetimes:{attached:function(){var e=this.properties,t={mpType:n.call(this)?"page":"component",mpInstance:this,propsData:e};ze(e.vueId,this),o.call(this,{vuePid:this._$vuePid,vueOptions:t}),this.$vm=new u(t),Ge(this.$vm,e.vueSlots),this.$vm.$mount()},ready:function(){this.$vm&&(this.$vm._isMounted=!0,this.$vm.__call_hook("mounted"),this.$vm.__call_hook("onReady"))},detached:function(){this.$vm&&this.$vm.$destroy()}},pageLifetimes:{show:function(e){this.$vm&&this.$vm.__call_hook("onPageShow",e)},hide:function(){this.$vm&&this.$vm.__call_hook("onPageHide")},resize:function(e){this.$vm&&this.$vm.__call_hook("onPageResize",e)}},methods:{__l:_t,__e:ut}};return l.externalClasses&&(p.externalClasses=l.externalClasses),Array.isArray(l.wxsCallMethods)&&l.wxsCallMethods.forEach((function(e){p.methods[e]=function(t){return this.$vm[e](t)}})),n?p:[p,u]}function kt(e){return Ot(e,{isPage:vt,initRelation:yt})}function At(e){return kt(e)}var St=["onShow","onHide","onUnload"];function Et(e,t){t.isPage,t.initRelation;var n=At(e);return Be(n.methods,St,e),n.methods.onLoad=function(e){this.$vm.$mp.query=e,this.$vm.__call_hook("onLoad",e)},n}function Tt(e){return Et(e,{isPage:vt,initRelation:yt})}function Pt(e){return Tt(e)}function xt(e){return Component(Pt(e))}function jt(e){return Component(At(e))}St.push.apply(St,Fe),he.forEach((function(e){de[e]=!1})),ve.forEach((function(e){var t=de[e]&&de[e].name?de[e].name:e;wx.canIUse(t)||(de[e]=!1)}));var $t={};"undefined"!==typeof Proxy?$t=new Proxy({},{get:function(e,t){return k(e,t)?e[t]:fe[t]?fe[t]:Ne[t]?ne(t,Ne[t]):Ee[t]?ne(t,Ee[t]):we[t]?ne(t,we[t]):Ce[t]?Ce[t]:k(wx,t)||k(de,t)?ne(t,be(t,wx[t])):void 0},set:function(e,t,n){return e[t]=n,!0}}):(Object.keys(fe).forEach((function(e){$t[e]=fe[e]})),Object.keys(we).forEach((function(e){$t[e]=ne(e,we[e])})),Object.keys(Ee).forEach((function(e){$t[e]=ne(e,we[e])})),Object.keys(Ce).forEach((function(e){$t[e]=Ce[e]})),Object.keys(Ne).forEach((function(e){$t[e]=ne(e,Ne[e])})),Object.keys(wx).forEach((function(e){(k(wx,e)||k(de,e))&&($t[e]=ne(e,be(e,wx[e])))}))),wx.createApp=wt,wx.createPage=xt,wx.createComponent=jt;var It=$t,Ct=It;t.default=Ct},10:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e,t,n,r,o,i,a,s,c,u){var l,f="function"===typeof e?e.options:e;if(c){f.components||(f.components={});var p=Object.prototype.hasOwnProperty;for(var d in c)p.call(c,d)&&!p.call(f.components,d)&&(f.components[d]=c[d])}if(u&&((u.beforeCreate||(u.beforeCreate=[])).unshift((function(){this[u.__module]=this})),(f.mixins||(f.mixins=[])).push(u)),t&&(f.render=t,f.staticRenderFns=n,f._compiled=!0),r&&(f.functional=!0),i&&(f._scopeId="data-v-"+i),a?(l=function(e){e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,e||"undefined"===typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},f._ssrRegister=l):o&&(l=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),l)if(f.functional){f._injectStyles=l;var h=f.render;f.render=function(e,t){return l.call(t),h(e,t)}}else{var v=f.beforeCreate;f.beforeCreate=v?[].concat(v,l):[l]}return{exports:e,options:f}}n.r(t),n.d(t,"default",(function(){return r}))},101:
/*!********************************************************************!*\
  !*** D:/Project/HBuilderProjects/繁星/components/uni-icons/icons.js ***!
  \********************************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={pulldown:"",refreshempty:"",back:"",forward:"",more:"","more-filled":"",scan:"",qq:"",weibo:"",weixin:"",pengyouquan:"",loop:"",refresh:"","refresh-filled":"",arrowthindown:"",arrowthinleft:"",arrowthinright:"",arrowthinup:"","undo-filled":"",undo:"",redo:"","redo-filled":"",bars:"",chatboxes:"",camera:"","chatboxes-filled":"","camera-filled":"","cart-filled":"",cart:"","checkbox-filled":"",checkbox:"",arrowleft:"",arrowdown:"",arrowright:"","smallcircle-filled":"",arrowup:"",circle:"","eye-filled":"","eye-slash-filled":"","eye-slash":"",eye:"","flag-filled":"",flag:"","gear-filled":"",reload:"",gear:"","hand-thumbsdown-filled":"","hand-thumbsdown":"","hand-thumbsup-filled":"","heart-filled":"","hand-thumbsup":"",heart:"",home:"",info:"","home-filled":"","info-filled":"","circle-filled":"","chat-filled":"",chat:"","mail-open-filled":"","email-filled":"","mail-open":"",email:"",checkmarkempty:"",list:"","locked-filled":"",locked:"","map-filled":"","map-pin":"","map-pin-ellipse":"",map:"","minus-filled":"","mic-filled":"",minus:"",micoff:"",mic:"",clear:"",smallcircle:"",close:"",closeempty:"",paperclip:"",paperplane:"","paperplane-filled":"","person-filled":"","contact-filled":"",person:"",contact:"","images-filled":"",phone:"",images:"",image:"","image-filled":"","location-filled":"",location:"","plus-filled":"",plus:"",plusempty:"","help-filled":"",help:"","navigate-filled":"",navigate:"","mic-slash-filled":"",search:"",settings:"",sound:"","sound-filled":"","spinner-cycle":"","download-filled":"","personadd-filled":"","videocam-filled":"",personadd:"",upload:"","upload-filled":"",starhalf:"","star-filled":"",star:"",trash:"","phone-filled":"",compose:"",videocam:"","trash-filled":"",download:"","chatbubble-filled":"",chatbubble:"","cloud-download":"","cloud-upload-filled":"","cloud-upload":"","cloud-download-filled":"",headphones:"",shop:""};t.default=r},2:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),function(e){
/*!
 * Vue.js v2.6.11
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
var n=Object.freeze({});function r(e){return void 0===e||null===e}function o(e){return void 0!==e&&null!==e}function i(e){return!0===e}function a(e){return!1===e}function s(e){return"string"===typeof e||"number"===typeof e||"symbol"===typeof e||"boolean"===typeof e}function c(e){return null!==e&&"object"===typeof e}var u=Object.prototype.toString;function l(e){return u.call(e).slice(8,-1)}function f(e){return"[object Object]"===u.call(e)}function p(e){return"[object RegExp]"===u.call(e)}function d(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function h(e){return o(e)&&"function"===typeof e.then&&"function"===typeof e.catch}function v(e){return null==e?"":Array.isArray(e)||f(e)&&e.toString===u?JSON.stringify(e,null,2):String(e)}function y(e){var t=parseFloat(e);return isNaN(t)?e:t}function g(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var _=g("slot,component",!0),m=g("key,ref,slot,slot-scope,is");function b(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var w=Object.prototype.hasOwnProperty;function O(e,t){return w.call(e,t)}function k(e){var t=Object.create(null);return function(n){var r=t[n];return r||(t[n]=e(n))}}var A=/-(\w)/g,S=k((function(e){return e.replace(A,(function(e,t){return t?t.toUpperCase():""}))})),E=k((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),T=/\B([A-Z])/g,P=k((function(e){return e.replace(T,"-$1").toLowerCase()}));function x(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function j(e,t){return e.bind(t)}var $=Function.prototype.bind?j:x;function I(e,t){t=t||0;var n=e.length-t,r=new Array(n);while(n--)r[n]=e[n+t];return r}function C(e,t){for(var n in t)e[n]=t[n];return e}function N(e){for(var t={},n=0;n<e.length;n++)e[n]&&C(t,e[n]);return t}function D(e,t,n){}var R=function(e,t,n){return!1},M=function(e){return e};function U(e,t){if(e===t)return!0;var n=c(e),r=c(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),i=Array.isArray(t);if(o&&i)return e.length===t.length&&e.every((function(e,n){return U(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||i)return!1;var a=Object.keys(e),s=Object.keys(t);return a.length===s.length&&a.every((function(n){return U(e[n],t[n])}))}catch(u){return!1}}function q(e,t){for(var n=0;n<e.length;n++)if(U(e[n],t))return n;return-1}function L(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var F=["component","directive","filter"],K=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],V={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:R,isReservedAttr:R,isUnknownElement:R,getTagNamespace:D,parsePlatformTagName:M,mustUseProp:R,async:!0,_lifecycleHooks:K},B=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function G(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var z=new RegExp("[^"+B.source+".$_\\d]");function Y(e){if(!z.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}var W,J="__proto__"in{},X="undefined"!==typeof window,Q="undefined"!==typeof WXEnvironment&&!!WXEnvironment.platform,Z=Q&&WXEnvironment.platform.toLowerCase(),ee=X&&window.navigator.userAgent.toLowerCase(),te=ee&&/msie|trident/.test(ee),ne=(ee&&ee.indexOf("msie 9.0"),ee&&ee.indexOf("edge/")>0),re=(ee&&ee.indexOf("android"),ee&&/iphone|ipad|ipod|ios/.test(ee)||"ios"===Z),oe=(ee&&/chrome\/\d+/.test(ee),ee&&/phantomjs/.test(ee),ee&&ee.match(/firefox\/(\d+)/),{}.watch);if(X)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){}}),window.addEventListener("test-passive",null,ie)}catch(Ro){}var ae=function(){return void 0===W&&(W=!X&&!Q&&"undefined"!==typeof e&&(e["process"]&&"server"===e["process"].env.VUE_ENV)),W},se=X&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ce(e){return"function"===typeof e&&/native code/.test(e.toString())}var ue,le="undefined"!==typeof Symbol&&ce(Symbol)&&"undefined"!==typeof Reflect&&ce(Reflect.ownKeys);ue="undefined"!==typeof Set&&ce(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var fe=D,pe=D,de=D,he=D,ve="undefined"!==typeof console,ye=/(?:^|[-_])(\w)/g,ge=function(e){return e.replace(ye,(function(e){return e.toUpperCase()})).replace(/[-_]/g,"")};fe=function(e,t){var n=t?de(t):"";V.warnHandler?V.warnHandler.call(null,e,t,n):ve&&!V.silent&&console.error("[Vue warn]: "+e+n)},pe=function(e,t){ve&&!V.silent&&console.warn("[Vue tip]: "+e+(t?de(t):""))},he=function(e,t){if(e.$root===e)return e.$options&&e.$options.__file?""+e.$options.__file:"<Root>";var n="function"===typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,r=n.name||n._componentTag,o=n.__file;if(!r&&o){var i=o.match(/([^/\\]+)\.vue$/);r=i&&i[1]}return(r?"<"+ge(r)+">":"<Anonymous>")+(o&&!1!==t?" at "+o:"")};var _e=function(e,t){var n="";while(t)t%2===1&&(n+=e),t>1&&(e+=e),t>>=1;return n};de=function(e){if(e._isVue&&e.$parent){var t=[],n=0;while(e&&"PageBody"!==e.$options.name){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}!e.$options.isReserved&&t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map((function(e,t){return""+(0===t?"---\x3e ":_e(" ",5+2*t))+(Array.isArray(e)?he(e[0])+"... ("+e[1]+" recursive calls)":he(e))})).join("\n")}return"\n\n(found in "+he(e)+")"};var me=0,be=function(){this.id=me++,this.subs=[]};function we(e){be.SharedObject.targetStack.push(e),be.SharedObject.target=e}function Oe(){be.SharedObject.targetStack.pop(),be.SharedObject.target=be.SharedObject.targetStack[be.SharedObject.targetStack.length-1]}be.prototype.addSub=function(e){this.subs.push(e)},be.prototype.removeSub=function(e){b(this.subs,e)},be.prototype.depend=function(){be.SharedObject.target&&be.SharedObject.target.addDep(this)},be.prototype.notify=function(){var e=this.subs.slice();V.async||e.sort((function(e,t){return e.id-t.id}));for(var t=0,n=e.length;t<n;t++)e[t].update()},be.SharedObject={},be.SharedObject.target=null,be.SharedObject.targetStack=[];var ke=function(e,t,n,r,o,i,a,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Ae={child:{configurable:!0}};Ae.child.get=function(){return this.componentInstance},Object.defineProperties(ke.prototype,Ae);var Se=function(e){void 0===e&&(e="");var t=new ke;return t.text=e,t.isComment=!0,t};function Ee(e){return new ke(void 0,void 0,void 0,String(e))}function Te(e){var t=new ke(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Pe=Array.prototype,xe=Object.create(Pe),je=["push","pop","shift","unshift","splice","sort","reverse"];je.forEach((function(e){var t=Pe[e];G(xe,e,(function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];var o,i=t.apply(this,n),a=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2);break}return o&&a.observeArray(o),a.dep.notify(),i}))}));var $e=Object.getOwnPropertyNames(xe),Ie=!0;function Ce(e){Ie=e}var Ne=function(e){this.value=e,this.dep=new be,this.vmCount=0,G(e,"__ob__",this),Array.isArray(e)?(J?e.push!==e.__proto__.push?Re(e,xe,$e):De(e,xe):Re(e,xe,$e),this.observeArray(e)):this.walk(e)};function De(e,t){e.__proto__=t}function Re(e,t,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];G(e,i,t[i])}}function Me(e,t){var n;if(c(e)&&!(e instanceof ke))return O(e,"__ob__")&&e.__ob__ instanceof Ne?n=e.__ob__:Ie&&!ae()&&(Array.isArray(e)||f(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Ne(e)),t&&n&&n.vmCount++,n}function Ue(e,t,n,r,o){var i=new be,a=Object.getOwnPropertyDescriptor(e,t);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=e[t]);var u=!o&&Me(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return be.SharedObject.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(t)&&Fe(t))),t},set:function(t){var a=s?s.call(e):n;t===a||t!==t&&a!==a||(r&&r(),s&&!c||(c?c.call(e,t):n=t,u=!o&&Me(t),i.notify()))}})}}function qe(e,t,n){if((r(e)||s(e))&&fe("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&d(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var o=e.__ob__;return e._isVue||o&&o.vmCount?(fe("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):o?(Ue(o.value,t,n),o.dep.notify(),n):(e[t]=n,n)}function Le(e,t){if((r(e)||s(e))&&fe("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&d(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount?fe("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):O(e,t)&&(delete e[t],n&&n.dep.notify())}}function Fe(e){for(var t=void 0,n=0,r=e.length;n<r;n++)t=e[n],t&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Fe(t)}Ne.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ue(e,t[n])},Ne.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Me(e[t])};var Ke=V.optionMergeStrategies;function Ve(e,t){if(!t)return e;for(var n,r,o,i=le?Reflect.ownKeys(t):Object.keys(t),a=0;a<i.length;a++)n=i[a],"__ob__"!==n&&(r=e[n],o=t[n],O(e,n)?r!==o&&f(r)&&f(o)&&Ve(r,o):qe(e,n,o));return e}function Be(e,t,n){return n?function(){var r="function"===typeof t?t.call(n,n):t,o="function"===typeof e?e.call(n,n):e;return r?Ve(r,o):o}:t?e?function(){return Ve("function"===typeof t?t.call(this,this):t,"function"===typeof e?e.call(this,this):e)}:t:e}function He(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?Ge(n):n}function Ge(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}function ze(e,t,n,r){var o=Object.create(e||null);return t?(et(r,t,n),C(o,t)):o}Ke.el=Ke.propsData=function(e,t,n,r){return n||fe('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Ye(e,t)},Ke.data=function(e,t,n){return n?Be(e,t,n):t&&"function"!==typeof t?(fe('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):Be(e,t)},K.forEach((function(e){Ke[e]=He})),F.forEach((function(e){Ke[e+"s"]=ze})),Ke.watch=function(e,t,n,r){if(e===oe&&(e=void 0),t===oe&&(t=void 0),!t)return Object.create(e||null);if(et(r,t,n),!e)return t;var o={};for(var i in C(o,e),t){var a=o[i],s=t[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Ke.props=Ke.methods=Ke.inject=Ke.computed=function(e,t,n,r){if(t&&et(r,t,n),!e)return t;var o=Object.create(null);return C(o,e),t&&C(o,t),o},Ke.provide=Be;var Ye=function(e,t){return void 0===t?e:t};function We(e){for(var t in e.components)Je(t)}function Je(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+B.source+"]*$").test(e)||fe('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(_(e)||V.isReservedTag(e))&&fe("Do not use built-in or reserved HTML elements as component id: "+e)}function Xe(e,t){var n=e.props;if(n){var r,o,i,a={};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],"string"===typeof o?(i=S(o),a[i]={type:null}):fe("props must be strings when using array syntax.")}else if(f(n))for(var s in n)o=n[s],i=S(s),a[i]=f(o)?o:{type:o};else fe('Invalid value for option "props": expected an Array or an Object, but got '+l(n)+".",t);e.props=a}}function Qe(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var a=n[i];r[i]=f(a)?C({from:i},a):{from:a}}else fe('Invalid value for option "inject": expected an Array or an Object, but got '+l(n)+".",t)}}function Ze(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"===typeof r&&(t[n]={bind:r,update:r})}}function et(e,t,n){f(t)||fe('Invalid value for option "'+e+'": expected an Object, but got '+l(t)+".",n)}function tt(e,t,n){if(We(t),"function"===typeof t&&(t=t.options),Xe(t,n),Qe(t,n),Ze(t),!t._base&&(t.extends&&(e=tt(e,t.extends,n)),t.mixins))for(var r=0,o=t.mixins.length;r<o;r++)e=tt(e,t.mixins[r],n);var i,a={};for(i in e)s(i);for(i in t)O(e,i)||s(i);function s(r){var o=Ke[r]||Ye;a[r]=o(e[r],t[r],n,r)}return a}function nt(e,t,n,r){if("string"===typeof n){var o=e[t];if(O(o,n))return o[n];var i=S(n);if(O(o,i))return o[i];var a=E(i);if(O(o,a))return o[a];var s=o[n]||o[i]||o[a];return r&&!s&&fe("Failed to resolve "+t.slice(0,-1)+": "+n,e),s}}function rt(e,t,n,r){var o=t[e],i=!O(n,e),a=n[e],s=lt(Boolean,o.type);if(s>-1)if(i&&!O(o,"default"))a=!1;else if(""===a||a===P(e)){var c=lt(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=ot(r,o,e);var u=Ie;Ce(!0),Me(a),Ce(u)}return it(o,e,a,r,i),a}function ot(e,t,n){if(O(t,"default")){var r=t.default;return c(r)&&fe('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"===typeof r&&"Function"!==ct(t.type)?r.call(e):r}}function it(e,t,n,r,o){if(e.required&&o)fe('Missing required prop: "'+t+'"',r);else if(null!=n||e.required){var i=e.type,a=!i||!0===i,s=[];if(i){Array.isArray(i)||(i=[i]);for(var c=0;c<i.length&&!a;c++){var u=st(n,i[c]);s.push(u.expectedType||""),a=u.valid}}if(a){var l=e.validator;l&&(l(n)||fe('Invalid prop: custom validator check failed for prop "'+t+'".',r))}else fe(ft(t,n,s),r)}}var at=/^(String|Number|Boolean|Function|Symbol)$/;function st(e,t){var n,r=ct(t);if(at.test(r)){var o=typeof e;n=o===r.toLowerCase(),n||"object"!==o||(n=e instanceof t)}else n="Object"===r?f(e):"Array"===r?Array.isArray(e):e instanceof t;return{valid:n,expectedType:r}}function ct(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function ut(e,t){return ct(e)===ct(t)}function lt(e,t){if(!Array.isArray(t))return ut(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(ut(t[n],e))return n;return-1}function ft(e,t,n){var r='Invalid prop: type check failed for prop "'+e+'". Expected '+n.map(E).join(", "),o=n[0],i=l(t),a=pt(t,o),s=pt(t,i);return 1===n.length&&dt(o)&&!ht(o,i)&&(r+=" with value "+a),r+=", got "+i+" ",dt(i)&&(r+="with value "+s+"."),r}function pt(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}function dt(e){var t=["string","number","boolean"];return t.some((function(t){return e.toLowerCase()===t}))}function ht(){var e=[],t=arguments.length;while(t--)e[t]=arguments[t];return e.some((function(e){return"boolean"===e.toLowerCase()}))}function vt(e,t,n){we();try{if(t){var r=t;while(r=r.$parent){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var a=!1===o[i].call(r,e,t,n);if(a)return}catch(Ro){gt(Ro,r,"errorCaptured hook")}}}gt(e,t,n)}finally{Oe()}}function yt(e,t,n,r,o){var i;try{i=n?e.apply(t,n):e.call(t),i&&!i._isVue&&h(i)&&!i._handled&&(i.catch((function(e){return vt(e,r,o+" (Promise/async)")})),i._handled=!0)}catch(Ro){vt(Ro,r,o)}return i}function gt(e,t,n){if(V.errorHandler)try{return V.errorHandler.call(null,e,t,n)}catch(Ro){Ro!==e&&_t(Ro,null,"config.errorHandler")}_t(e,t,n)}function _t(e,t,n){if(fe("Error in "+n+': "'+e.toString()+'"',t),!X&&!Q||"undefined"===typeof console)throw e;console.error(e)}var mt,bt,wt=[],Ot=!1;function kt(){Ot=!1;var e=wt.slice(0);wt.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!==typeof Promise&&ce(Promise)){var At=Promise.resolve();mt=function(){At.then(kt),re&&setTimeout(D)}}else if(te||"undefined"===typeof MutationObserver||!ce(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())mt="undefined"!==typeof setImmediate&&ce(setImmediate)?function(){setImmediate(kt)}:function(){setTimeout(kt,0)};else{var St=1,Et=new MutationObserver(kt),Tt=document.createTextNode(String(St));Et.observe(Tt,{characterData:!0}),mt=function(){St=(St+1)%2,Tt.data=String(St)}}function Pt(e,t){var n;if(wt.push((function(){if(e)try{e.call(t)}catch(Ro){vt(Ro,t,"nextTick")}else n&&n(t)})),Ot||(Ot=!0,mt()),!e&&"undefined"!==typeof Promise)return new Promise((function(e){n=e}))}var xt=g("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),jt=function(e,t){fe('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},$t=function(e,t){fe('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',e)},It="undefined"!==typeof Proxy&&ce(Proxy);if(It){var Ct=g("stop,prevent,self,ctrl,shift,alt,meta,exact");V.keyCodes=new Proxy(V.keyCodes,{set:function(e,t,n){return Ct(t)?(fe("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var Nt={has:function(e,t){var n=t in e,r=xt(t)||"string"===typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return n||r||(t in e.$data?$t(e,t):jt(e,t)),n||!r}},Dt={get:function(e,t){return"string"!==typeof t||t in e||(t in e.$data?$t(e,t):jt(e,t)),e[t]}};bt=function(e){if(It){var t=e.$options,n=t.render&&t.render._withStripped?Dt:Nt;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Rt,Mt,Ut=new ue;function qt(e){Lt(e,Ut),Ut.clear()}function Lt(e,t){var n,r,o=Array.isArray(e);if(!(!o&&!c(e)||Object.isFrozen(e)||e instanceof ke)){if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(o){n=e.length;while(n--)Lt(e[n],t)}else{r=Object.keys(e),n=r.length;while(n--)Lt(e[r[n]],t)}}}var Ft=X&&window.performance;Ft&&Ft.mark&&Ft.measure&&Ft.clearMarks&&Ft.clearMeasures&&(Rt=function(e){return Ft.mark(e)},Mt=function(e,t,n){Ft.measure(e,t,n),Ft.clearMarks(t),Ft.clearMarks(n)});var Kt=k((function(e){var t="&"===e.charAt(0);e=t?e.slice(1):e;var n="~"===e.charAt(0);e=n?e.slice(1):e;var r="!"===e.charAt(0);return e=r?e.slice(1):e,{name:e,once:n,capture:r,passive:t}}));function Vt(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return yt(r,null,arguments,t,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)yt(o[i],null,e,t,"v-on handler")}return n.fns=e,n}function Bt(e,t,n,o,a,s){var c,u,l,f;for(c in e)u=e[c],l=t[c],f=Kt(c),r(u)?fe('Invalid handler for event "'+f.name+'": got '+String(u),s):r(l)?(r(u.fns)&&(u=e[c]=Vt(u,s)),i(f.once)&&(u=e[c]=a(f.name,u,f.capture)),n(f.name,u,f.capture,f.passive,f.params)):u!==l&&(l.fns=u,e[c]=l);for(c in t)r(e[c])&&(f=Kt(c),o(f.name,t[c],f.capture))}function Ht(e,t,n,i){var a=t.options.mpOptions&&t.options.mpOptions.properties;if(r(a))return n;var s=t.options.mpOptions.externalClasses||[],c=e.attrs,u=e.props;if(o(c)||o(u))for(var l in a){var f=P(l),p=zt(n,u,l,f,!0)||zt(n,c,l,f,!1);p&&n[l]&&-1!==s.indexOf(f)&&i[S(n[l])]&&(n[l]=i[S(n[l])])}return n}function Gt(e,t,n,i){var a=t.options.props;if(r(a))return Ht(e,t,{},i);var s={},c=e.attrs,u=e.props;if(o(c)||o(u))for(var l in a){var f=P(l),p=l.toLowerCase();l!==p&&c&&O(c,p)&&pe('Prop "'+p+'" is passed to component '+he(n||t)+', but the declared prop name is "'+l+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+f+'" instead of "'+l+'".'),zt(s,u,l,f,!0)||zt(s,c,l,f,!1)}return Ht(e,t,s,i)}function zt(e,t,n,r,i){if(o(t)){if(O(t,n))return e[n]=t[n],i||delete t[n],!0;if(O(t,r))return e[n]=t[r],i||delete t[r],!0}return!1}function Yt(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function Wt(e){return s(e)?[Ee(e)]:Array.isArray(e)?Xt(e):void 0}function Jt(e){return o(e)&&o(e.text)&&a(e.isComment)}function Xt(e,t){var n,a,c,u,l=[];for(n=0;n<e.length;n++)a=e[n],r(a)||"boolean"===typeof a||(c=l.length-1,u=l[c],Array.isArray(a)?a.length>0&&(a=Xt(a,(t||"")+"_"+n),Jt(a[0])&&Jt(u)&&(l[c]=Ee(u.text+a[0].text),a.shift()),l.push.apply(l,a)):s(a)?Jt(u)?l[c]=Ee(u.text+a):""!==a&&l.push(Ee(a)):Jt(a)&&Jt(u)?l[c]=Ee(u.text+a.text):(i(e._isVList)&&o(a.tag)&&r(a.key)&&o(t)&&(a.key="__vlist"+t+"_"+n+"__"),l.push(a)));return l}function Qt(e){var t=e.$options.provide;t&&(e._provided="function"===typeof t?t.call(e):t)}function Zt(e){var t=en(e.$options.inject,e);t&&(Ce(!1),Object.keys(t).forEach((function(n){Ue(e,n,t[n],(function(){fe('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)}))})),Ce(!0))}function en(e,t){if(e){for(var n=Object.create(null),r=le?Reflect.ownKeys(e):Object.keys(e),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){var a=e[i].from,s=t;while(s){if(s._provided&&O(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in e[i]){var c=e[i].default;n[i]="function"===typeof c?c.call(t):c}else fe('Injection "'+i+'" not found',t)}}return n}}function tn(e,t){if(!e||!e.length)return{};for(var n={},r=0,o=e.length;r<o;r++){var i=e[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==t&&i.fnContext!==t||!a||null==a.slot)i.asyncMeta&&i.asyncMeta.data&&"page"===i.asyncMeta.data.slot?(n["page"]||(n["page"]=[])).push(i):(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(nn)&&delete n[u];return n}function nn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function rn(e,t,r){var o,i=Object.keys(t).length>0,a=e?!!e.$stable:!i,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(a&&r&&r!==n&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},e)e[c]&&"$"!==c[0]&&(o[c]=on(t,c,e[c]))}else o={};for(var u in t)u in o||(o[u]=an(t,u));return e&&Object.isExtensible(e)&&(e._normalized=o),G(o,"$stable",a),G(o,"$key",s),G(o,"$hasNormal",i),o}function on(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({});return e=e&&"object"===typeof e&&!Array.isArray(e)?[e]:Wt(e),e&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function an(e,t){return function(){return e[t]}}function sn(e,t){var n,r,i,a,s;if(Array.isArray(e)||"string"===typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r,r,r);else if("number"===typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r,r,r);else if(c(e))if(le&&e[Symbol.iterator]){n=[];var u=e[Symbol.iterator](),l=u.next();while(!l.done)n.push(t(l.value,n.length,r++,r)),l=u.next()}else for(a=Object.keys(e),n=new Array(a.length),r=0,i=a.length;r<i;r++)s=a[r],n[r]=t(e[s],s,r,r);return o(n)||(n=[]),n._isVList=!0,n}function cn(e,t,n,r){var o,i=this.$scopedSlots[e];i?(n=n||{},r&&(c(r)||fe("slot v-bind without argument expects an Object",this),n=C(C({},r),n)),o=i(n,this,n._i)||t):o=this.$slots[e]||t;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function un(e){return nt(this.$options,"filters",e,!0)||M}function ln(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function fn(e,t,n,r,o){var i=V.keyCodes[t]||n;return o&&r&&!V.keyCodes[t]?ln(o,r):i?ln(i,e):r?P(r)!==t:void 0}function pn(e,t,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=N(n));var a=function(a){if("class"===a||"style"===a||m(a))i=e;else{var s=e.attrs&&e.attrs.type;i=r||V.mustUseProp(t,s,a)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var c=S(a),u=P(a);if(!(c in i)&&!(u in i)&&(i[a]=n[a],o)){var l=e.on||(e.on={});l["update:"+a]=function(e){n[a]=e}}};for(var s in n)a(s)}else fe("v-bind without argument expects an Object or Array value",this);return e}function dn(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t?r:(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),vn(r,"__static__"+e,!1),r)}function hn(e,t,n){return vn(e,"__once__"+t+(n?"_"+n:""),!0),e}function vn(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!==typeof e[r]&&yn(e[r],t+"_"+r,n);else yn(e,t,n)}function yn(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function gn(e,t){if(t)if(f(t)){var n=e.on=e.on?C({},e.on):{};for(var r in t){var o=n[r],i=t[r];n[r]=o?[].concat(o,i):i}}else fe("v-on without argument expects an Object value",this);return e}function _n(e,t,n,r){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var i=e[o];Array.isArray(i)?_n(i,t,n):i&&(i.proxy&&(i.fn.proxy=!0),t[i.key]=i.fn)}return r&&(t.$key=r),t}function mn(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"===typeof r&&r?e[t[n]]=t[n+1]:""!==r&&null!==r&&fe("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return e}function bn(e,t){return"string"===typeof e?t+e:e}function wn(e){e._o=hn,e._n=y,e._s=v,e._l=sn,e._t=cn,e._q=U,e._i=q,e._m=dn,e._f=un,e._k=fn,e._b=pn,e._v=Ee,e._e=Se,e._u=_n,e._g=gn,e._d=mn,e._p=bn}function On(e,t,r,o,a){var s,c=this,u=a.options;O(o,"_uid")?(s=Object.create(o),s._original=o):(s=o,o=o._original);var l=i(u._compiled),f=!l;this.data=e,this.props=t,this.children=r,this.parent=o,this.listeners=e.on||n,this.injections=en(u.inject,o),this.slots=function(){return c.$slots||rn(e.scopedSlots,c.$slots=tn(r,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return rn(e.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=rn(e.scopedSlots,this.$slots)),u._scopeId?this._c=function(e,t,n,r){var i=Dn(s,e,t,n,r,f);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(e,t,n,r){return Dn(s,e,t,n,r,f)}}function kn(e,t,r,i,a){var s=e.options,c={},u=s.props;if(o(u))for(var l in u)c[l]=rt(l,u,t||n);else o(r.attrs)&&Sn(c,r.attrs),o(r.props)&&Sn(c,r.props);var f=new On(r,c,a,i,e),p=s.render.call(null,f._c,f);if(p instanceof ke)return An(p,r,f.parent,s,f);if(Array.isArray(p)){for(var d=Wt(p)||[],h=new Array(d.length),v=0;v<d.length;v++)h[v]=An(d[v],r,f.parent,s,f);return h}}function An(e,t,n,r,o){var i=Te(e);return i.fnContext=n,i.fnOptions=r,(i.devtoolsMeta=i.devtoolsMeta||{}).renderContext=o,t.slot&&((i.data||(i.data={})).slot=t.slot),i}function Sn(e,t){for(var n in t)e[S(n)]=t[n]}wn(On.prototype);var En={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;En.prepatch(n,n)}else{var r=e.componentInstance=xn(e,er);r.$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions,r=t.componentInstance=e.componentInstance;ir(r,n.propsData,n.listeners,t,n.children)},insert:function(e){var t=e.context,n=e.componentInstance;n._isMounted||(ur(n,"onServiceCreated"),ur(n,"onServiceAttached"),n._isMounted=!0,ur(n,"mounted")),e.data.keepAlive&&(t._isMounted?kr(n):sr(n,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?cr(t,!0):t.$destroy())}},Tn=Object.keys(En);function Pn(e,t,n,a,s){if(!r(e)){var u=n.$options._base;if(c(e)&&(e=u.extend(e)),"function"===typeof e){var l;if(r(e.cid)&&(l=e,e=Hn(l,u),void 0===e))return Bn(l,t,n,a,s);t=t||{},Gr(e),o(t.model)&&In(e.options,t);var f=Gt(t,e,s,n);if(i(e.options.functional))return kn(e,f,t,n,a);var p=t.on;if(t.on=t.nativeOn,i(e.options.abstract)){var d=t.slot;t={},d&&(t.slot=d)}jn(t);var h=e.options.name||s,v=new ke("vue-component-"+e.cid+(h?"-"+h:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:f,listeners:p,tag:s,children:a},l);return v}fe("Invalid Component definition: "+String(e),n)}}function xn(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;return o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new e.componentOptions.Ctor(n)}function jn(e){for(var t=e.hook||(e.hook={}),n=0;n<Tn.length;n++){var r=Tn[n],o=t[r],i=En[r];o===i||o&&o._merged||(t[r]=o?$n(i,o):i)}}function $n(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function In(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var i=t.on||(t.on={}),a=i[r],s=t.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[r]=[s].concat(a)):i[r]=s}var Cn=1,Nn=2;function Dn(e,t,n,r,o,a){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),i(a)&&(o=Nn),Rn(e,t,n,r,o)}function Rn(e,t,n,r,i){if(o(n)&&o(n.__ob__))return fe("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),Se();if(o(n)&&o(n.is)&&(t=n.is),!t)return Se();var a,c,u;(o(n)&&o(n.key)&&!s(n.key)&&fe("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(r)&&"function"===typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===Nn?r=Wt(r):i===Cn&&(r=Yt(r)),"string"===typeof t)?(c=e.$vnode&&e.$vnode.ns||V.getTagNamespace(t),V.isReservedTag(t)?(o(n)&&o(n.nativeOn)&&fe("The .native modifier for v-on is only valid on components but it was used on <"+t+">.",e),a=new ke(V.parsePlatformTagName(t),n,r,void 0,void 0,e)):a=n&&n.pre||!o(u=nt(e.$options,"components",t))?new ke(t,n,r,void 0,void 0,e):Pn(u,n,e,r,t)):a=Pn(t,n,e,r);return Array.isArray(a)?a:o(a)?(o(c)&&Mn(a,c),o(n)&&Un(n),a):Se()}function Mn(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),o(e.children))for(var a=0,s=e.children.length;a<s;a++){var c=e.children[a];o(c.tag)&&(r(c.ns)||i(n)&&"svg"!==c.tag)&&Mn(c,t,n)}}function Un(e){c(e.style)&&qt(e.style),c(e.class)&&qt(e.class)}function qn(e){e._vnode=null,e._staticTrees=null;var t=e.$options,r=e.$vnode=t._parentVnode,o=r&&r.context;e.$slots=tn(t._renderChildren,o),e.$scopedSlots=n,e._c=function(t,n,r,o){return Dn(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return Dn(e,t,n,r,o,!0)};var i=r&&r.data;Ue(e,"$attrs",i&&i.attrs||n,(function(){!tr&&fe("$attrs is readonly.",e)}),!0),Ue(e,"$listeners",t._parentListeners||n,(function(){!tr&&fe("$listeners is readonly.",e)}),!0)}var Ln,Fn=null;function Kn(e){wn(e.prototype),e.prototype.$nextTick=function(e){return Pt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,o=n._parentVnode;o&&(t.$scopedSlots=rn(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{Fn=t,e=r.call(t._renderProxy,t.$createElement)}catch(Ro){if(vt(Ro,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,Ro)}catch(Ro){vt(Ro,t,"renderError"),e=t._vnode}else e=t._vnode}finally{Fn=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof ke||(Array.isArray(e)&&fe("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=Se()),e.parent=o,e}}function Vn(e,t){return(e.__esModule||le&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?t.extend(e):e}function Bn(e,t,n,r,o){var i=Se();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:r,tag:o},i}function Hn(e,t){if(i(e.error)&&o(e.errorComp))return e.errorComp;if(o(e.resolved))return e.resolved;var n=Fn;if(n&&o(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n),i(e.loading)&&o(e.loadingComp))return e.loadingComp;if(n&&!o(e.owners)){var a=e.owners=[n],s=!0,u=null,l=null;n.$on("hook:destroyed",(function(){return b(a,n)}));var f=function(e){for(var t=0,n=a.length;t<n;t++)a[t].$forceUpdate();e&&(a.length=0,null!==u&&(clearTimeout(u),u=null),null!==l&&(clearTimeout(l),l=null))},p=L((function(n){e.resolved=Vn(n,t),s?a.length=0:f(!0)})),d=L((function(t){fe("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),o(e.errorComp)&&(e.error=!0,f(!0))})),v=e(p,d);return c(v)&&(h(v)?r(e.resolved)&&v.then(p,d):h(v.component)&&(v.component.then(p,d),o(v.error)&&(e.errorComp=Vn(v.error,t)),o(v.loading)&&(e.loadingComp=Vn(v.loading,t),0===v.delay?e.loading=!0:u=setTimeout((function(){u=null,r(e.resolved)&&r(e.error)&&(e.loading=!0,f(!1))}),v.delay||200)),o(v.timeout)&&(l=setTimeout((function(){l=null,r(e.resolved)&&d("timeout ("+v.timeout+"ms)")}),v.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}function Gn(e){return e.isComment&&e.asyncFactory}function zn(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(o(n)&&(o(n.componentOptions)||Gn(n)))return n}}function Yn(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Qn(e,t)}function Wn(e,t){Ln.$on(e,t)}function Jn(e,t){Ln.$off(e,t)}function Xn(e,t){var n=Ln;return function r(){var o=t.apply(null,arguments);null!==o&&n.$off(e,r)}}function Qn(e,t,n){Ln=e,Bt(t,n||{},Wn,Jn,Xn,e),Ln=void 0}function Zn(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var o=0,i=e.length;o<i;o++)r.$on(e[o],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,o=e.length;r<o;r++)n.$off(e[r],t);return n}var i,a=n._events[e];if(!a)return n;if(!t)return n._events[e]=null,n;var s=a.length;while(s--)if(i=a[s],i===t||i.fn===t){a.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&pe('Event "'+n+'" is emitted in component '+he(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+P(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?I(r):r;for(var o=I(arguments,1),i='event handler for "'+e+'"',a=0,s=r.length;a<s;a++)yt(r[a],t,o,t,i)}return t}}var er=null,tr=!1;function nr(e){var t=er;return er=e,function(){er=t}}function rr(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){while(n.$options.abstract&&n.$parent)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function or(e){e.prototype._update=function(e,t){var n=this,r=n.$el,o=n._vnode,i=nr(n);n._vnode=e,n.$el=o?n.__patch__(o,e):n.__patch__(n.$el,e,t,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){var e=this;e._watcher&&e._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){ur(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||b(t.$children,e),e._watcher&&e._watcher.teardown();var n=e._watchers.length;while(n--)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),ur(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}function ir(e,t,r,o,i){tr=!0;var a=o.data.scopedSlots,s=e.$scopedSlots,c=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key),u=!!(i||e.$options._renderChildren||c);if(e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o),e.$options._renderChildren=i,e.$attrs=o.data.attrs||n,e.$listeners=r||n,t&&e.$options.props){Ce(!1);for(var l=e._props,f=e.$options._propKeys||[],p=0;p<f.length;p++){var d=f[p],h=e.$options.props;l[d]=rt(d,h,t,e)}Ce(!0),e.$options.propsData=t}e._$updateProperties&&e._$updateProperties(e),r=r||n;var v=e.$options._parentListeners;e.$options._parentListeners=r,Qn(e,r,v),u&&(e.$slots=tn(i,o.context),e.$forceUpdate()),tr=!1}function ar(e){while(e&&(e=e.$parent))if(e._inactive)return!0;return!1}function sr(e,t){if(t){if(e._directInactive=!1,ar(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)sr(e.$children[n]);ur(e,"activated")}}function cr(e,t){if((!t||(e._directInactive=!0,!ar(e)))&&!e._inactive){e._inactive=!0;for(var n=0;n<e.$children.length;n++)cr(e.$children[n]);ur(e,"deactivated")}}function ur(e,t){we();var n=e.$options[t],r=t+" hook";if(n)for(var o=0,i=n.length;o<i;o++)yt(n[o],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),Oe()}var lr=100,fr=[],pr=[],dr={},hr={},vr=!1,yr=!1,gr=0;function _r(){gr=fr.length=pr.length=0,dr={},hr={},vr=yr=!1}var mr=Date.now;if(X&&!te){var br=window.performance;br&&"function"===typeof br.now&&mr()>document.createEvent("Event").timeStamp&&(mr=function(){return br.now()})}function wr(){var e,t;for(mr(),yr=!0,fr.sort((function(e,t){return e.id-t.id})),gr=0;gr<fr.length;gr++)if(e=fr[gr],e.before&&e.before(),t=e.id,dr[t]=null,e.run(),null!=dr[t]&&(hr[t]=(hr[t]||0)+1,hr[t]>lr)){fe("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=pr.slice(),r=fr.slice();_r(),Ar(n),Or(r),se&&V.devtools&&se.emit("flush")}function Or(e){var t=e.length;while(t--){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&ur(r,"updated")}}function kr(e){e._inactive=!1,pr.push(e)}function Ar(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,sr(e[t],!0)}function Sr(e){var t=e.id;if(null==dr[t]){if(dr[t]=!0,yr){var n=fr.length-1;while(n>gr&&fr[n].id>e.id)n--;fr.splice(n+1,0,e)}else fr.push(e);if(!vr){if(vr=!0,!V.async)return void wr();Pt(wr)}}}var Er=0,Tr=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Er,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression=t.toString(),"function"===typeof t?this.getter=t:(this.getter=Y(t),this.getter||(this.getter=D,fe('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Tr.prototype.get=function(){var e;we(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(Ro){if(!this.user)throw Ro;vt(Ro,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&qt(e),Oe(),this.cleanupDeps()}return e},Tr.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Tr.prototype.cleanupDeps=function(){var e=this.deps.length;while(e--){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Tr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Sr(this)},Tr.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(Ro){vt(Ro,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},Tr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Tr.prototype.depend=function(){var e=this.deps.length;while(e--)this.deps[e].depend()},Tr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);var e=this.deps.length;while(e--)this.deps[e].removeSub(this);this.active=!1}};var Pr={enumerable:!0,configurable:!0,get:D,set:D};function xr(e,t,n){Pr.get=function(){return this[t][n]},Pr.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Pr)}function jr(e){e._watchers=[];var t=e.$options;t.props&&$r(e,t.props),t.methods&&qr(e,t.methods),t.data?Ir(e):Me(e._data={},!0),t.computed&&Dr(e,t.computed),t.watch&&t.watch!==oe&&Lr(e,t.watch)}function $r(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[],i=!e.$parent;i||Ce(!1);var a=function(a){o.push(a);var s=rt(a,t,n,e),c=P(a);(m(c)||V.isReservedAttr(c))&&fe('"'+c+'" is a reserved attribute and cannot be used as component prop.',e),Ue(r,a,s,(function(){if(!i&&!tr){if("mp-baidu"===e.mpHost)return;if("value"===a&&Array.isArray(e.$options.behaviors)&&-1!==e.$options.behaviors.indexOf("uni://form-field"))return;if(e._getFormData)return;var t=e.$parent;while(t){if(t.__next_tick_pending)return;t=t.$parent}fe("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',e)}})),a in e||xr(e,"_props",a)};for(var s in t)a(s);Ce(!0)}function Ir(e){var t=e.$options.data;t=e._data="function"===typeof t?Cr(t,e):t||{},f(t)||(t={},fe("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));var n=Object.keys(t),r=e.$options.props,o=e.$options.methods,i=n.length;while(i--){var a=n[i];o&&O(o,a)&&fe('Method "'+a+'" has already been defined as a data property.',e),r&&O(r,a)?fe('The data property "'+a+'" is already declared as a prop. Use prop default value instead.',e):H(a)||xr(e,"_data",a)}Me(t,!0)}function Cr(e,t){we();try{return e.call(t,t)}catch(Ro){return vt(Ro,t,"data()"),{}}finally{Oe()}}var Nr={lazy:!0};function Dr(e,t){var n=e._computedWatchers=Object.create(null),r=ae();for(var o in t){var i=t[o],a="function"===typeof i?i:i.get;null==a&&fe('Getter is missing for computed property "'+o+'".',e),r||(n[o]=new Tr(e,a||D,D,Nr)),o in e?o in e.$data?fe('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props&&fe('The computed property "'+o+'" is already defined as a prop.',e):Rr(e,o,i)}}function Rr(e,t,n){var r=!ae();"function"===typeof n?(Pr.get=r?Mr(t):Ur(n),Pr.set=D):(Pr.get=n.get?r&&!1!==n.cache?Mr(t):Ur(n.get):D,Pr.set=n.set||D),Pr.set===D&&(Pr.set=function(){fe('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,Pr)}function Mr(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),be.SharedObject.target&&t.depend(),t.value}}function Ur(e){return function(){return e.call(this,this)}}function qr(e,t){var n=e.$options.props;for(var r in t)"function"!==typeof t[r]&&fe('Method "'+r+'" has type "'+typeof t[r]+'" in the component definition. Did you reference the function correctly?',e),n&&O(n,r)&&fe('Method "'+r+'" has already been defined as a prop.',e),r in e&&H(r)&&fe('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]="function"!==typeof t[r]?D:$(t[r],e)}function Lr(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Fr(e,n,r[o]);else Fr(e,n,r)}}function Fr(e,t,n,r){return f(n)&&(r=n,n=n.handler),"string"===typeof n&&(n=e[n]),e.$watch(t,n,r)}function Kr(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(){fe("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){fe("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=qe,e.prototype.$delete=Le,e.prototype.$watch=function(e,t,n){var r=this;if(f(t))return Fr(r,e,t,n);n=n||{},n.user=!0;var o=new Tr(r,e,t,n);if(n.immediate)try{t.call(r,o.value)}catch(i){vt(i,r,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}var Vr=0;function Br(e){e.prototype._init=function(e){var t,n,r=this;r._uid=Vr++,V.performance&&Rt&&(t="vue-perf-start:"+r._uid,n="vue-perf-end:"+r._uid,Rt(t)),r._isVue=!0,e&&e._isComponent?Hr(r,e):r.$options=tt(Gr(r.constructor),e||{},r),bt(r),r._self=r,rr(r),Yn(r),qn(r),ur(r,"beforeCreate"),!r._$fallback&&Zt(r),jr(r),!r._$fallback&&Qt(r),!r._$fallback&&ur(r,"created"),V.performance&&Rt&&(r._name=he(r,!1),Rt(n),Mt("vue "+r._name+" init",t,n)),r.$options.el&&r.$mount(r.$options.el)}}function Hr(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}function Gr(e){var t=e.options;if(e.super){var n=Gr(e.super),r=e.superOptions;if(n!==r){e.superOptions=n;var o=zr(e);o&&C(e.extendOptions,o),t=e.options=tt(n,e.extendOptions),t.name&&(t.components[t.name]=e)}}return t}function zr(e){var t,n=e.options,r=e.sealedOptions;for(var o in n)n[o]!==r[o]&&(t||(t={}),t[o]=n[o]);return t}function Yr(e){this instanceof Yr||fe("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function Wr(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=I(arguments,1);return n.unshift(this),"function"===typeof e.install?e.install.apply(e,n):"function"===typeof e&&e.apply(null,n),t.push(e),this}}function Jr(e){e.mixin=function(e){return this.options=tt(this.options,e),this}}function Xr(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var i=e.name||n.options.name;i&&Je(i);var a=function(e){this._init(e)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=t++,a.options=tt(n.options,e),a["super"]=n,a.options.props&&Qr(a),a.options.computed&&Zr(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,F.forEach((function(e){a[e]=n[e]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=e,a.sealedOptions=C({},a.options),o[r]=a,a}}function Qr(e){var t=e.options.props;for(var n in t)xr(e.prototype,"_props",n)}function Zr(e){var t=e.options.computed;for(var n in t)Rr(e.prototype,n,t[n])}function eo(e){F.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&Je(e),"component"===t&&f(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"===typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}function to(e){return e&&(e.Ctor.options.name||e.tag)}function no(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"===typeof e?e.split(",").indexOf(t)>-1:!!p(e)&&e.test(t)}function ro(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var i in n){var a=n[i];if(a){var s=to(a.componentOptions);s&&!t(s)&&oo(n,i,r,o)}}}function oo(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,b(n,t)}Br(Yr),Kr(Yr),Zn(Yr),or(Yr),Kn(Yr);var io=[String,RegExp,Array],ao={name:"keep-alive",abstract:!0,props:{include:io,exclude:io,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)oo(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(t){ro(e,(function(e){return no(t,e)}))})),this.$watch("exclude",(function(t){ro(e,(function(e){return!no(t,e)}))}))},render:function(){var e=this.$slots.default,t=zn(e),n=t&&t.componentOptions;if(n){var r=to(n),o=this,i=o.include,a=o.exclude;if(i&&(!r||!no(i,r))||a&&r&&no(a,r))return t;var s=this,c=s.cache,u=s.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;c[l]?(t.componentInstance=c[l].componentInstance,b(u,l),u.push(l)):(c[l]=t,u.push(l),this.max&&u.length>parseInt(this.max)&&oo(c,u[0],u,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}},so={KeepAlive:ao};function co(e){var t={get:function(){return V},set:function(){fe("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:fe,extend:C,mergeOptions:tt,defineReactive:Ue},e.set=qe,e.delete=Le,e.nextTick=Pt,e.observable=function(e){return Me(e),e},e.options=Object.create(null),F.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,C(e.options.components,so),Wr(e),Jr(e),Xr(e),eo(e)}co(Yr),Object.defineProperty(Yr.prototype,"$isServer",{get:ae}),Object.defineProperty(Yr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Yr,"FunctionalRenderContext",{value:On}),Yr.version="2.6.11";var uo="[object Array]",lo="[object Object]";function fo(e,t){var n={};return po(e,t),ho(e,t,"",n),n}function po(e,t){if(e!==t){var n=yo(e),r=yo(t);if(n==lo&&r==lo){if(Object.keys(e).length>=Object.keys(t).length)for(var o in t){var i=e[o];void 0===i?e[o]=null:po(i,t[o])}}else n==uo&&r==uo&&e.length>=t.length&&t.forEach((function(t,n){po(e[n],t)}))}}function ho(e,t,n,r){if(e!==t){var o=yo(e),i=yo(t);if(o==lo)if(i!=lo||Object.keys(e).length<Object.keys(t).length)vo(r,n,e);else{var a=function(o){var i=e[o],a=t[o],s=yo(i),c=yo(a);if(s!=uo&&s!=lo)i!=t[o]&&vo(r,(""==n?"":n+".")+o,i);else if(s==uo)c!=uo?vo(r,(""==n?"":n+".")+o,i):i.length<a.length?vo(r,(""==n?"":n+".")+o,i):i.forEach((function(e,t){ho(e,a[t],(""==n?"":n+".")+o+"["+t+"]",r)}));else if(s==lo)if(c!=lo||Object.keys(i).length<Object.keys(a).length)vo(r,(""==n?"":n+".")+o,i);else for(var u in i)ho(i[u],a[u],(""==n?"":n+".")+o+"."+u,r)};for(var s in e)a(s)}else o==uo?i!=uo?vo(r,n,e):e.length<t.length?vo(r,n,e):e.forEach((function(e,o){ho(e,t[o],n+"["+o+"]",r)})):vo(r,n,e)}}function vo(e,t,n){e[t]=n}function yo(e){return Object.prototype.toString.call(e)}function go(e){if(e.__next_tick_callbacks&&e.__next_tick_callbacks.length){if(Object({VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG){var t=e.$scope;console.log("["+ +new Date+"]["+(t.is||t.route)+"]["+e._uid+"]:flushCallbacks["+e.__next_tick_callbacks.length+"]")}var n=e.__next_tick_callbacks.slice(0);e.__next_tick_callbacks.length=0;for(var r=0;r<n.length;r++)n[r]()}}function _o(e){return fr.find((function(t){return e._watcher===t}))}function mo(e,t){if(!e.__next_tick_pending&&!_o(e)){if(Object({VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG){var n=e.$scope;console.log("["+ +new Date+"]["+(n.is||n.route)+"]["+e._uid+"]:nextVueTick")}return Pt(t,e)}if(Object({VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG){var r=e.$scope;console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+e._uid+"]:nextMPTick")}var o;if(e.__next_tick_callbacks||(e.__next_tick_callbacks=[]),e.__next_tick_callbacks.push((function(){if(t)try{t.call(e)}catch(Ro){vt(Ro,e,"nextTick")}else o&&o(e)})),!t&&"undefined"!==typeof Promise)return new Promise((function(e){o=e}))}function bo(e){var t=Object.create(null),n=[].concat(Object.keys(e._data||{}),Object.keys(e._computedWatchers||{}));n.reduce((function(t,n){return t[n]=e[n],t}),t);var r=e.__secret_vfa_state__&&e.__secret_vfa_state__.rawBindings;return r&&Object.keys(r).forEach((function(n){t[n]=e[n]})),Object.assign(t,e.$mp.data||{}),Array.isArray(e.$options.behaviors)&&-1!==e.$options.behaviors.indexOf("uni://form-field")&&(t["name"]=e.name,t["value"]=e.value),JSON.parse(JSON.stringify(t))}var wo=function(e,t){var n=this;if(null!==t&&("page"===this.mpType||"component"===this.mpType)){var r=this.$scope,o=Object.create(null);try{o=bo(this)}catch(s){console.error(s)}o.__webviewId__=r.data.__webviewId__;var i=Object.create(null);Object.keys(o).forEach((function(e){i[e]=r.data[e]}));var a=!1===this.$shouldDiffData?o:fo(o,i);Object.keys(a).length?(Object({VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG&&console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+this._uid+"]差量更新",JSON.stringify(a)),this.__next_tick_pending=!0,r.setData(a,(function(){n.__next_tick_pending=!1,go(n)}))):go(this)}};function Oo(){}function ko(e,t,n){if(!e.mpType)return e;"app"===e.mpType&&(e.$options.render=Oo),e.$options.render||(e.$options.render=Oo,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?fe("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):fe("Failed to mount component: template or render function not defined.",e)),!e._$fallback&&ur(e,"beforeMount");var r=function(){e._update(e._render(),n)};return new Tr(e,r,D,{before:function(){e._isMounted&&!e._isDestroyed&&ur(e,"beforeUpdate")}},!0),n=!1,e}function Ao(e,t){return o(e)||o(t)?So(e,Eo(t)):""}function So(e,t){return e?t?e+" "+t:e:t||""}function Eo(e){return Array.isArray(e)?To(e):c(e)?Po(e):"string"===typeof e?e:""}function To(e){for(var t,n="",r=0,i=e.length;r<i;r++)o(t=Eo(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}function Po(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}var xo=k((function(e){var t={},n=/;(?![^(]*\))/g,r=/:(.+)/;return e.split(n).forEach((function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}));function jo(e){return Array.isArray(e)?N(e):"string"===typeof e?xo(e):e}var $o=["createSelectorQuery","createIntersectionObserver","selectAllComponents","selectComponent"];function Io(e,t){var n=t.split("."),r=n[0];return 0===r.indexOf("__$n")&&(r=parseInt(r.replace("__$n",""))),1===n.length?e[r]:Io(e[r],n.slice(1).join("."))}function Co(e){e.config.errorHandler=function(t,n,r){e.util.warn("Error in "+r+': "'+t.toString()+'"',n),console.error(t);var o=getApp();o&&o.onError&&o.onError(t)};var t=e.prototype.$emit;e.prototype.$emit=function(e){return this.$scope&&e&&this.$scope["triggerEvent"](e,{__args__:I(arguments,1)}),t.apply(this,arguments)},e.prototype.$nextTick=function(e){return mo(this,e)},$o.forEach((function(t){e.prototype[t]=function(e){return this.$scope&&this.$scope[t]?this.$scope[t](e):"undefined"!==typeof my?"createSelectorQuery"===t?my.createSelectorQuery(e):"createIntersectionObserver"===t?my.createIntersectionObserver(e):void 0:void 0}})),e.prototype.__init_provide=Qt,e.prototype.__init_injections=Zt,e.prototype.__call_hook=function(e,t){var n=this;we();var r,o=n.$options[e],i=e+" hook";if(o)for(var a=0,s=o.length;a<s;a++)r=yt(o[a],n,t?[t]:null,n,i);return n._hasHookEvent&&n.$emit("hook:"+e,t),Oe(),r},e.prototype.__set_model=function(e,t,n,r){Array.isArray(r)&&(-1!==r.indexOf("trim")&&(n=n.trim()),-1!==r.indexOf("number")&&(n=this._n(n))),e||(e=this),e[t]=n},e.prototype.__set_sync=function(e,t,n){e||(e=this),e[t]=n},e.prototype.__get_orig=function(e){return f(e)&&e["$orig"]||e},e.prototype.__get_value=function(e,t){return Io(t||this,e)},e.prototype.__get_class=function(e,t){return Ao(t,e)},e.prototype.__get_style=function(e,t){if(!e&&!t)return"";var n=jo(e),r=t?C(t,n):n;return Object.keys(r).map((function(e){return P(e)+":"+r[e]})).join(";")},e.prototype.__map=function(e,t){var n,r,o,i,a;if(Array.isArray(e)){for(n=new Array(e.length),r=0,o=e.length;r<o;r++)n[r]=t(e[r],r);return n}if(c(e)){for(i=Object.keys(e),n=Object.create(null),r=0,o=i.length;r<o;r++)a=i[r],n[a]=t(e[a],a,r);return n}if("number"===typeof e){for(n=new Array(e),r=0,o=e;r<o;r++)n[r]=t(r,r);return n}return[]}}var No=["onLaunch","onShow","onHide","onUniNViewMessage","onPageNotFound","onThemeChange","onError","onUnhandledRejection","onLoad","onReady","onUnload","onPullDownRefresh","onReachBottom","onTabItemTap","onAddToFavorites","onShareTimeline","onShareAppMessage","onResize","onPageScroll","onNavigationBarButtonTap","onBackPress","onNavigationBarSearchInputChanged","onNavigationBarSearchInputConfirmed","onNavigationBarSearchInputClicked","onPageShow","onPageHide","onPageResize"];function Do(e){var t=e.extend;e.extend=function(e){e=e||{};var n=e.methods;return n&&Object.keys(n).forEach((function(t){-1!==No.indexOf(t)&&(e[t]=n[t],delete n[t])})),t.call(this,e)};var n=e.config.optionMergeStrategies,r=n.created;No.forEach((function(e){n[e]=r})),e.prototype.__lifecycle_hooks__=No}Yr.prototype.__patch__=wo,Yr.prototype.$mount=function(e,t){return ko(this,e,t)},Do(Yr),Co(Yr),t["default"]=Yr}.call(this,n(/*! ./../../../../../webpack/buildin/global.js */3))},3:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}e.exports=n},4:
/*!*************************************************!*\
  !*** D:/Project/HBuilderProjects/繁星/pages.json ***!
  \*************************************************/
/*! no static exports found */function(e,t){},61:
/*!********************************************************************!*\
  !*** D:/Project/HBuilderProjects/繁星/components/uni-popup/popup.js ***!
  \********************************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(/*! ./message.js */62));function o(e){return e&&e.__esModule?e:{default:e}}var i={top:"top",bottom:"bottom",center:"center",message:"top",dialog:"center",share:"bottom"},a={data:function(){return{config:i}},mixins:[r.default]};t.default=a},62:
/*!**********************************************************************!*\
  !*** D:/Project/HBuilderProjects/繁星/components/uni-popup/message.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={created:function(){"message"===this.type&&(this.maskShow=!1,this.childrenMsg=null)},methods:{customOpen:function(){this.childrenMsg&&this.childrenMsg.open()},customClose:function(){this.childrenMsg&&this.childrenMsg.close()}}};t.default=r},84:
/*!*******************************************************************************!*\
  !*** D:/Project/HBuilderProjects/繁星/components/uni-data-checkbox/clientdb.js ***!
  \*******************************************************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e,n){function r(e){return s(e)||a(e)||i(e)||o()}function o(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function i(e,t){if(e){if("string"===typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}function a(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function s(e){if(Array.isArray(e))return c(e)}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u={load:"load",error:"error"},l={add:"add",replace:"replace"},f=["pageCurrent","pageSize","collection","action","field","getcount","orderby","where"],p={data:function(){return{loading:!1,listData:this.getone?{}:[],paginationInternal:{current:this.pageCurrent,size:this.pageSize,count:0},errorMessage:""}},created:function(){var t=this;this.collection&&(this.db=e.database(),this.dbCmd=this.db.command),this._isEnded=!1,this.$watch((function(){var e=[];return f.forEach((function(n){e.push(t[n])})),e}),(function(e,n){t.paginationInternal.pageSize=t.pageSize;for(var r=!1,o=2;o<e.length;o++)if(e[o]!=n[o]){r=!0;break}r&&(t.clear(),t.reset()),e[0]!=n[0]&&(t.paginationInternal.current=t.pageCurrent),t._execLoadData()}))},methods:{loadData:function(e,t){var n=null;"object"===typeof e?(e.clear&&(this.clear(),this.reset()),void 0!==e.current&&(this.paginationInternal.current=e.current),"function"===typeof t&&(n=t)):"function"===typeof e&&(n=e),this._execLoadData(n)},loadMore:function(){this._isEnded||this._execLoadData()},refresh:function(){this.clear(),this._execLoadData()},clear:function(){this._isEnded=!1,this.listData=[]},reset:function(){this.paginationInternal.current=1},remove:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=r.action,i=r.callback,a=r.confirmTitle,s=r.confirmContent;e&&e.length&&n.showModal({title:a||"提示",content:s||"是否删除该数据",showCancel:!0,success:function(n){n.confirm&&t._execRemove(e,o,i)}})},_execLoadData:function(e){var t=this;this.loading||(this.loading=!0,this.errorMessage="",this._getExec().then((function(n){t.loading=!1;var o=n.result,i=o.data,a=o.count;if(t._isEnded=i.length<t.pageSize,e&&e(i,t._isEnded),t._dispatchEvent(u.load,i),t.getone)t.listData=i.length?i[0]:void 0;else if(t.pageData===l.add){var s;(s=t.listData).push.apply(s,r(i)),t.listData.length&&t.paginationInternal.current++}else t.pageData===l.replace&&(t.listData=i,t.paginationInternal.count=a)})).catch((function(n){t.loading=!1,t.errorMessage=n,e&&e(),t.$emit(u.error,n)})))},_getExec:function(){var e=this.db;this.action&&(e=e.action(this.action)),e=e.collection(this.collection),this.where&&Object.keys(this.where).length&&(e=e.where(this.where)),this.field&&(e=e.field(this.field)),this.orderby&&(e=e.orderBy(this.orderby));var t=this.paginationInternal,n=t.current,r=t.size;return e=e.skip(r*(n-1)).limit(r).get({getCount:this.getcount}),e},_execRemove:function(e,t,r){var o=this;if(this.collection&&e){var i=Array.isArray(e)?e:[e];if(i.length){n.showLoading({mask:!0});var a=this.db;t&&(a=a.action(t)),a.collection(this.collection).where({_id:dbCmd.in(i)}).remove().then((function(e){r&&r(e.result),o.pageData===l.replace?o.refresh():o.removeData(i)})).catch((function(e){n.showModal({content:e.message,showCancel:!1})})).finally((function(){n.hideLoading()}))}}},removeData:function(e){for(var t=e.slice(0),n=this.listData,r=n.length-1;r>=0;r--){var o=t.indexOf(n[r]._id);o>=0&&(n.splice(r,1),t.splice(o,1))}},_dispatchEvent:function(e,t){this._changeDataFunction?this._changeDataFunction(t,this._isEnded):this.$emit(e,t,this._isEnded)}}};t.default=p}).call(this,n(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js */85)["default"],n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},85:
/*!************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e,r){function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e){return function(){var t,n=y(e);if(d()){var r=y(this).constructor;t=Reflect.construct(n,arguments,r)}else t=n.apply(this,arguments);return c(this,t)}}function c(e,t){return!t||"object"!==typeof t&&"function"!==typeof t?u(e):t}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}function f(e){var t="function"===typeof Map?new Map:void 0;return f=function(e){if(null===e||!h(e))return e;if("function"!==typeof e)throw new TypeError("Super expression must either be null or a function");if("undefined"!==typeof t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return p(e,arguments,y(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),v(n,e)},f(e)}function p(e,t,n){return p=d()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=Function.bind.apply(e,r),i=new o;return n&&v(i,n.prototype),i},p.apply(null,arguments)}function d(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(g){return!1}}function h(e){return-1!==Function.toString.call(e).indexOf("[native code]")}function v(e,t){return v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},v(e,t)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var g="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof e?e:"undefined"!=typeof self?self:{};function _(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function m(e,t,n){return e(n={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&n.path)}},n.exports),n.exports}var b=m((function(e,t){var n;e.exports=(n=n||function(e,t){var n=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),r={},o=r.lib={},i=o.Base={extend:function(e){var t=n(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},a=o.WordArray=i.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||c).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,o=e.sigBytes;if(this.clamp(),r%4)for(var i=0;i<o;i++){var a=n[i>>>2]>>>24-i%4*8&255;t[r+i>>>2]|=a<<24-(r+i)%4*8}else for(i=0;i<o;i+=4)t[r+i>>>2]=n[i>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=i.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n,r=[],o=function(t){t=t;var n=987654321,r=4294967295;return function(){var o=((n=36969*(65535&n)+(n>>16)&r)<<16)+(t=18e3*(65535&t)+(t>>16)&r)&r;return o/=4294967296,(o+=.5)*(e.random()>.5?1:-1)}},i=0;i<t;i+=4){var s=o(4294967296*(n||e.random()));n=987654071*s(),r.push(4294967296*s()|0)}return new a.init(r,t)}}),s=r.enc={},c=s.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new a.init(n,t/2)}},u=s.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(i))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new a.init(n,t)}},l=s.Utf8={stringify:function(e){try{return decodeURIComponent(escape(u.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return u.parse(unescape(encodeURIComponent(e)))}},f=o.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new a.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=l.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,r=n.words,o=n.sigBytes,i=this.blockSize,s=o/(4*i),c=(s=t?e.ceil(s):e.max((0|s)-this._minBufferSize,0))*i,u=e.min(4*c,o);if(c){for(var l=0;l<c;l+=i)this._doProcessBlock(r,l);var f=r.splice(0,c);n.sigBytes-=u}return new a.init(f,u)},clone:function(){var e=i.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),p=(o.Hasher=f.extend({cfg:i.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){f.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new p.HMAC.init(e,n).finalize(t)}}}),r.algo={});return r}(Math),n)})),w=(m((function(e,t){var n;e.exports=(n=b,function(e){var t=n,r=t.lib,o=r.WordArray,i=r.Hasher,a=t.algo,s=[];!function(){for(var t=0;t<64;t++)s[t]=4294967296*e.abs(e.sin(t+1))|0}();var c=a.MD5=i.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var r=t+n,o=e[r];e[r]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8)}var i=this._hash.words,a=e[t+0],c=e[t+1],d=e[t+2],h=e[t+3],v=e[t+4],y=e[t+5],g=e[t+6],_=e[t+7],m=e[t+8],b=e[t+9],w=e[t+10],O=e[t+11],k=e[t+12],A=e[t+13],S=e[t+14],E=e[t+15],T=i[0],P=i[1],x=i[2],j=i[3];T=u(T,P,x,j,a,7,s[0]),j=u(j,T,P,x,c,12,s[1]),x=u(x,j,T,P,d,17,s[2]),P=u(P,x,j,T,h,22,s[3]),T=u(T,P,x,j,v,7,s[4]),j=u(j,T,P,x,y,12,s[5]),x=u(x,j,T,P,g,17,s[6]),P=u(P,x,j,T,_,22,s[7]),T=u(T,P,x,j,m,7,s[8]),j=u(j,T,P,x,b,12,s[9]),x=u(x,j,T,P,w,17,s[10]),P=u(P,x,j,T,O,22,s[11]),T=u(T,P,x,j,k,7,s[12]),j=u(j,T,P,x,A,12,s[13]),x=u(x,j,T,P,S,17,s[14]),T=l(T,P=u(P,x,j,T,E,22,s[15]),x,j,c,5,s[16]),j=l(j,T,P,x,g,9,s[17]),x=l(x,j,T,P,O,14,s[18]),P=l(P,x,j,T,a,20,s[19]),T=l(T,P,x,j,y,5,s[20]),j=l(j,T,P,x,w,9,s[21]),x=l(x,j,T,P,E,14,s[22]),P=l(P,x,j,T,v,20,s[23]),T=l(T,P,x,j,b,5,s[24]),j=l(j,T,P,x,S,9,s[25]),x=l(x,j,T,P,h,14,s[26]),P=l(P,x,j,T,m,20,s[27]),T=l(T,P,x,j,A,5,s[28]),j=l(j,T,P,x,d,9,s[29]),x=l(x,j,T,P,_,14,s[30]),T=f(T,P=l(P,x,j,T,k,20,s[31]),x,j,y,4,s[32]),j=f(j,T,P,x,m,11,s[33]),x=f(x,j,T,P,O,16,s[34]),P=f(P,x,j,T,S,23,s[35]),T=f(T,P,x,j,c,4,s[36]),j=f(j,T,P,x,v,11,s[37]),x=f(x,j,T,P,_,16,s[38]),P=f(P,x,j,T,w,23,s[39]),T=f(T,P,x,j,A,4,s[40]),j=f(j,T,P,x,a,11,s[41]),x=f(x,j,T,P,h,16,s[42]),P=f(P,x,j,T,g,23,s[43]),T=f(T,P,x,j,b,4,s[44]),j=f(j,T,P,x,k,11,s[45]),x=f(x,j,T,P,E,16,s[46]),T=p(T,P=f(P,x,j,T,d,23,s[47]),x,j,a,6,s[48]),j=p(j,T,P,x,_,10,s[49]),x=p(x,j,T,P,S,15,s[50]),P=p(P,x,j,T,y,21,s[51]),T=p(T,P,x,j,k,6,s[52]),j=p(j,T,P,x,h,10,s[53]),x=p(x,j,T,P,w,15,s[54]),P=p(P,x,j,T,c,21,s[55]),T=p(T,P,x,j,m,6,s[56]),j=p(j,T,P,x,E,10,s[57]),x=p(x,j,T,P,g,15,s[58]),P=p(P,x,j,T,A,21,s[59]),T=p(T,P,x,j,v,6,s[60]),j=p(j,T,P,x,O,10,s[61]),x=p(x,j,T,P,d,15,s[62]),P=p(P,x,j,T,b,21,s[63]),i[0]=i[0]+T|0,i[1]=i[1]+P|0,i[2]=i[2]+x|0,i[3]=i[3]+j|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,o=8*t.sigBytes;n[o>>>5]|=128<<24-o%32;var i=e.floor(r/4294967296),a=r;n[15+(o+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),n[14+(o+64>>>9<<4)]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),t.sigBytes=4*(n.length+1),this._process();for(var s=this._hash,c=s.words,u=0;u<4;u++){var l=c[u];c[u]=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8)}return s},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});function u(e,t,n,r,o,i,a){var s=e+(t&n|~t&r)+o+a;return(s<<i|s>>>32-i)+t}function l(e,t,n,r,o,i,a){var s=e+(t&r|n&~r)+o+a;return(s<<i|s>>>32-i)+t}function f(e,t,n,r,o,i,a){var s=e+(t^n^r)+o+a;return(s<<i|s>>>32-i)+t}function p(e,t,n,r,o,i,a){var s=e+(n^(t|~r))+o+a;return(s<<i|s>>>32-i)+t}t.MD5=i._createHelper(c),t.HmacMD5=i._createHmacHelper(c)}(Math),n.MD5)})),m((function(e,t){var n,r,o;e.exports=(r=(n=b).lib.Base,o=n.enc.Utf8,void(n.algo.HMAC=r.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=o.parse(t));var n=e.blockSize,r=4*n;t.sigBytes>r&&(t=e.finalize(t)),t.clamp();for(var i=this._oKey=t.clone(),a=this._iKey=t.clone(),s=i.words,c=a.words,u=0;u<n;u++)s[u]^=1549556828,c[u]^=909522486;i.sigBytes=a.sigBytes=r,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})))})),m((function(e,t){e.exports=b.HmacMD5})));function O(e){return function(t){if(!((t=t||{}).success||t.fail||t.complete))return e.call(this,t);e.call(this,t).then((function(e){t.success&&t.success(e),t.complete&&t.complete(e)})).catch((function(e){t.fail&&t.fail(e),t.complete&&t.complete(e)}))}}var k,A,S,E=function(e){l(n,e);var t=s(n);function n(e){var r;return a(this,n),r=t.call(this,e.message),r.errMsg=e.message||"",Object.defineProperties(u(r),{code:{get:function(){return e.code}},requestId:{get:function(){return e.requestId}},message:{get:function(){return this.errMsg},set:function(e){this.errMsg=e}}}),r}return n}(f(Error));try{k=n(/*! uni-stat-config */86).default||n(/*! uni-stat-config */86)}catch(g){k={appid:""}}function T(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8,t="";t.length<e;)t+=Math.random().toString(32).substring(2);return t.substring(0,e)}function P(){if("n"===x()){try{A=plus.runtime.getDCloudId()}catch(g){A=""}return A}return A||(A=T(32),r.setStorage({key:"__DC_CLOUD_UUID",data:A})),A}function x(){return{"app-plus":"n",h5:"h5","mp-weixin":"wx","mp-alipay":"ali","mp-baidu":"bd","mp-toutiao":"tt","mp-qq":"qq","quickapp-native":"qn"}["mp-qq"]}var j={sign:function(e,t){var n="";return Object.keys(e).sort().forEach((function(t){e[t]&&(n=n+"&"+t+"="+e[t])})),n=n.slice(1),w(n,t).toString()},wrappedRequest:function(e,t){return new Promise((function(n,r){t(Object.assign(e,{complete:function(e){e||(e={});var t=e.data&&e.data.header&&e.data.header["x-serverless-request-id"]||e.header&&e.header["request-id"];if(!e.statusCode||e.statusCode>=400)return r(new E({code:"SYS_ERR",message:e.errMsg||"request:fail",requestId:t}));var o=e.data;if(o.error)return r(new E({code:o.error.code,message:o.error.message,requestId:t}));o.result=o.data,o.requestId=t,delete o.data,n(o)}}))}))}},$={image:"image/*",jpg:"image/jpeg",jpeg:"image/jpeg",png:"image/png",gif:"image/gif",webp:"image/webp",svg:"image/svg+xml",mp3:"audio/mp3",mp4:"video/mp4",ogg:"audio/ogg",webm:"video/webm"};function I(e){return $[e.toLowerCase()]}var C,N=function(){function e(t){a(this,e),["spaceId","clientSecret"].forEach((function(e){if(!Object.prototype.hasOwnProperty.call(t,e))throw new Error("缺少参数"+e)})),this.config=Object.assign({},{endpoint:"https://api.bspapp.com"},t),this.config.provider="aliyun",this.config.requestUrl=this.config.endpoint+"/client",this.config.envType=this.config.envType||"public",this.config.accessTokenKey="access_token_"+this.config.spaceId}return i(e,[{key:"setAccessToken",value:function(e){this.accessToken=e}},{key:"requestWrapped",value:function(e){return j.wrappedRequest(e,this.adapter.request)}},{key:"requestAuth",value:function(e){return this.requestWrapped(e)}},{key:"request",value:function(e,t){var n=this;return this.hasAccessToken?t?this.requestWrapped(e):this.requestWrapped(e).catch((function(t){return new Promise((function(e,n){!t||"GATEWAY_INVALID_TOKEN"!==t.code&&"InvalidParameter.InvalidToken"!==t.code?n(t):e()})).then((function(){return n.getAccessToken()})).then((function(){var t=n.rebuildRequest(e);return n.request(t,!0)}))})):this.getAccessToken().then((function(){var t=n.rebuildRequest(e);return n.request(t,!0)}))}},{key:"rebuildRequest",value:function(e){var t=Object.assign({},e);return t.data.token=this.accessToken,t.header["x-basement-token"]=this.accessToken,t.header["x-serverless-sign"]=j.sign(t.data,this.config.clientSecret),t}},{key:"setupRequest",value:function(e,t){var n=Object.assign({},e,{spaceId:this.config.spaceId,timestamp:Date.now()}),r={"Content-Type":"application/json"};return"auth"!==t&&(n.token=this.accessToken,r["x-basement-token"]=this.accessToken),r["x-serverless-sign"]=j.sign(n,this.config.clientSecret),{url:this.config.requestUrl,method:"POST",data:n,dataType:"json",header:r}}},{key:"getAccessToken",value:function(){var e=this;return this.requestAuth(this.setupRequest({method:"serverless.auth.user.anonymousAuthorize",params:"{}"},"auth")).then((function(t){return new Promise((function(n,r){t.result&&t.result.accessToken?(e.setAccessToken(t.result.accessToken),n(e.accessToken)):r(new E({code:"AUTH_FAILED",message:"获取accessToken失败"}))}))}))}},{key:"authorize",value:function(){this.getAccessToken()}},{key:"callFunction",value:function(e){var t={method:"serverless.function.runtime.invoke",params:JSON.stringify({functionTarget:e.name,functionArgs:e.data||{}})};return this.request(this.setupRequest(t))}},{key:"getOSSUploadOptionsFromPath",value:function(e){var t={method:"serverless.file.resource.generateProximalSign",params:JSON.stringify(e)};return this.request(this.setupRequest(t))}},{key:"uploadFileToOSS",value:function(e){var t=this,n=e.url,r=e.formData,o=e.name,i=e.filePath,a=e.fileType,s=e.onUploadProgress;return new Promise((function(e,c){var u=t.adapter.uploadFile({url:n,formData:r,name:o,filePath:i,fileType:a,header:{"X-OSS-server-side-encrpytion":"AES256"},success:function(t){t&&t.statusCode<400?e(t):c(new E({code:"UPLOAD_FAILED",message:"文件上传失败"}))},fail:function(e){c(e)}});"function"==typeof s&&u&&"function"==typeof u.onProgressUpdate&&u.onProgressUpdate((function(e){s({loaded:e.totalBytesSent,total:e.totalBytesExpectedToSend})}))}))}},{key:"reportOSSUpload",value:function(e){var t={method:"serverless.file.resource.report",params:JSON.stringify(e)};return this.request(this.setupRequest(t))}},{key:"uploadFile",value:function(e){var t=this,n=e.filePath,r=e.cloudPath,o=e.fileType,i=void 0===o?"image":o,a=e.onUploadProgress,s=e.config;if(!r)throw new E({code:"CLOUDPATH_REQUIRED",message:"cloudPath不可为空"});var c,u,l,f=s&&s.envType||this.config.envType,p=r.split("?")[0].split(".").pop();if(!I(p))throw new E({code:"UNSUPPORTED_FILE_TYPE",message:"不支持的文件类型"});return this.getOSSUploadOptionsFromPath({env:f,filename:r}).then((function(e){var r=e.result;c=I(p),u=r.id,l="https://"+r.cdnDomain+"/"+r.ossPath;var o={url:"https://"+r.host,formData:{"Cache-Control":"max-age=2592000","Content-Disposition":"attachment",OSSAccessKeyId:r.accessKeyId,Signature:r.signature,host:r.host,id:u,key:r.ossPath,policy:r.policy,success_action_status:200},fileName:"file",name:"file",filePath:n,fileType:i,contentType:c};return t.uploadFileToOSS(Object.assign({},o,{onUploadProgress:a}))})).then((function(){return t.reportOSSUpload({id:u,contentType:c})})).then((function(e){return new Promise((function(t,r){e.success?t({success:!0,filePath:n,fileID:l}):r(new E({code:"UPLOAD_FAILED",message:"文件上传失败"}))}))}))}},{key:"deleteFile",value:function(e){var t=e.fileList,n={method:"serverless.file.resource.delete",params:JSON.stringify({id:t[0]})};return this.request(this.setupRequest(n))}},{key:"hasAccessToken",get:function(){return!!this.accessToken}}]),e}(),D={init:function(e){var t=new N(e);["uploadFile","deleteFile"].forEach((function(e){t[e]=O(t[e]).bind(t)}));var n={signInAnonymously:function(){return t.authorize()},getLoginState:function(){return Promise.resolve(!1)}};return t.auth=function(){return n},t}};function R(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var i in n)""===o?!r&&(t+="?"):o+="&",o+=i+"="+encodeURIComponent(n[i]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}!function(e){e.local="local",e.none="none",e.session="session"}(C||(C={}));var M,U,q,L=(M=function(e,t){return(M=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}M(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),F=function(){return(F=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},K=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return L(t,e),t.prototype.post=function(e){var t=e.url,n=e.data,o=e.headers;return new Promise((function(e,i){r.request({url:R("https:",t),data:n,method:"POST",header:o,success:function(t){e(t)},fail:function(e){i(e)}})}))},t.prototype.upload=function(e){return new Promise((function(t,n){var o=e.url,i=e.file,a=e.data,s=e.headers,c=e.fileType,u=r.uploadFile({url:R("https:",o),name:"file",formData:Object.assign({},a),filePath:i,fileType:c,header:s,success:function(e){var n={statusCode:e.statusCode,data:e.data||{}};200===e.statusCode&&a.success_action_status&&(n.statusCode=parseInt(a.success_action_status,10)),t(n)},fail:function(e){n(new Error(e.errMsg||"uploadFile:fail"))}});"function"==typeof e.onUploadProgress&&u&&"function"==typeof u.onProgressUpdate&&u.onProgressUpdate((function(t){e.onUploadProgress({loaded:t.totalBytesSent,total:t.totalBytesExpectedToSend})}))}))},t.prototype.download=function(e){var t=e.url,n=e.headers;return new Promise((function(e,o){r.downloadFile({url:R("https:",t),header:n,success:function(t){200===t.statusCode&&t.tempFilePath?e({statusCode:200,tempFilePath:t.tempFilePath}):e(t)},fail:function(e){o(e)}})}))},t}((function(){})),V={setItem:function(e,t){r.setStorageSync(e,t)},getItem:function(e){return r.getStorageSync(e)},removeItem:function(e){r.removeStorageSync(e)},clear:function(){r.clearStorageSync()}},B=function(e,t){void 0===t&&(t={});var n=r.connectSocket(F({url:e},t));return{set onopen(e){n.onOpen(e)},set onmessage(e){n.onMessage(e)},set onclose(e){n.onClose(e)},set onerror(e){n.onError(e)},send:function(e){return n.send({data:e})},close:function(e,t){return n.close({code:e,reason:t})},get readyState(){return n.readyState},CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3}},H={genAdapter:function(){return{root:{},reqClass:K,wsClass:B,localStorage:V,primaryStorage:C.local}},isMatch:function(){return"undefined"!=typeof r&&!!r.request},runtime:"uni_app"},G=m((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getQuery=function(e,t){if("undefined"==typeof window)return!1;var n=t||window.location.search,r=new RegExp("(^|&)"+e+"=([^&]*)(&|$)"),o=n.substr(n.indexOf("?")+1).match(r);return null!=o?o[2]:""},t.getHash=function(e){var t=window.location.hash.match(new RegExp("[#?&/]"+e+"=([^&#]*)"));return t?t[1]:""},t.removeParam=function(e,t){var n=t.split("?")[0],r=[],o=-1!==t.indexOf("?")?t.split("?")[1]:"";if(""!==o){for(var i=(r=o.split("&")).length-1;i>=0;i-=1)r[i].split("=")[0]===e&&r.splice(i,1);n=n+"?"+r.join("&")}return n},t.createPromiseCallback=function(){var e;if(!Promise){(e=function(){}).promise={};var t=function(){throw new Error('Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.')};return Object.defineProperty(e.promise,"then",{get:t}),Object.defineProperty(e.promise,"catch",{get:t}),e}var n=new Promise((function(t,n){e=function(e,r){return e?n(e):t(r)}}));return e.promise=n,e},t.getWeixinCode=function(){return t.getQuery("code")||t.getHash("code")},t.getMiniAppCode=function(){return new Promise((function(e,t){wx.login({success:function(t){e(t.code)},fail:function(e){t(e)}})}))},t.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},t.isString=function(e){return"string"==typeof e},t.isUndefined=function(e){return void 0===e},t.isInstanceOf=function(e,t){return e instanceof t},t.isFormData=function(e){return"[object FormData]"===Object.prototype.toString.call(e)},t.genSeqId=function(){return Math.random().toString(16).slice(2)},t.getArgNames=function(e){var t=e.toString();return t.slice(t.indexOf("(")+1,t.indexOf(")")).match(/([^\s,]+)/g)},t.formatUrl=function(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var i in n)""===o?!r&&(t+="?"):o+="&",o+=i+"="+encodeURIComponent(n[i]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}})),z="dist/index.js",Y="./dist/index.d.ts",W={build:"npm run tsc && webpack",tsc:"tsc -p tsconfig.json","tsc:w":"tsc -p tsconfig.json -w",test:"jest --verbose false -i",e2e:'NODE_ENV=e2e webpack && jest --config="./jest.e2e.config.js"  --verbose false -i "e2e"',start:"webpack-dev-server --hot --open",eslint:'eslint "./**/*.js" "./**/*.ts"',"eslint-fix":'eslint --fix "./**/*.js" "./**/*.ts"',test_web:"npm run tsc && webpack-dev-server --devtool eval-source-map --progress --colors --hot --inline --content-base ./dist --host jimmytest-088bef.tcb.qcloud.la --port 80 --disableHostCheck true --mode development --config webpack.test.js"},J={type:"git",url:"https://github.com/TencentCloudBase/tcb-js-sdk"},X=["tcb","js-sdk"],Q={"@cloudbase/adapter-interface":"^0.2.0","@cloudbase/adapter-wx_mp":"^0.2.1","@cloudbase/database":"^0.9.8"},Z={"@babel/core":"^7.6.2","@babel/plugin-proposal-class-properties":"^7.5.5","@babel/plugin-proposal-object-rest-spread":"^7.6.2","@babel/plugin-transform-runtime":"^7.6.2","@babel/preset-env":"^7.6.2","@babel/preset-typescript":"^7.6.0","@babel/runtime":"^7.6.2","@types/jest":"^23.1.4","@types/node":"^10.14.4","@types/superagent":"^4.1.4",axios:"^0.19.0","babel-eslint":"^10.0.1","babel-loader":"^8.0.6","babel-polyfill":"^6.26.0",eslint:"^5.16.0","eslint-config-alloy":"^1.4.2","eslint-config-prettier":"^4.1.0","eslint-plugin-prettier":"^3.0.1","eslint-plugin-typescript":"^1.0.0-rc.3",express:"^4.17.1",husky:"^3.1.0",jest:"^24.7.1","jest-puppeteer":"^4.3.0","lint-staged":"^9.5.0","power-assert":"^1.6.1",puppeteer:"^1.20.0","serve-static":"^1.14.1","ts-jest":"^23.10.4","ts-loader":"^6.2.1",typescript:"^3.4.3","typescript-eslint-parser":"^22.0.0",webpack:"^4.41.3","webpack-bundle-analyzer":"^3.4.1","webpack-cli":"^3.3.0","webpack-dev-server":"^3.3.1","webpack-merge":"^4.2.2","webpack-visualizer-plugin":"^0.1.11"},ee={hooks:{"pre-commit":"lint-staged"}},te={name:"tcb-js-sdk",version:"1.3.5",description:"js sdk for tcb",main:z,types:Y,scripts:W,repository:J,keywords:X,author:"jimmyjzhang",license:"ISC",dependencies:Q,devDependencies:Z,husky:ee,"lint-staged":{"*.{js,ts}":["eslint --fix","git add"]}},ne=(U=Object.freeze({__proto__:null,name:"tcb-js-sdk",version:"1.3.5",description:"js sdk for tcb",main:z,types:Y,scripts:W,repository:J,keywords:X,author:"jimmyjzhang",license:"ISC",dependencies:Q,devDependencies:Z,husky:ee,default:te}))&&U.default||U,re=m((function(e,t){var n=g&&g.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var r=n(ne);t.SDK_VERISON=r.version,t.ACCESS_TOKEN="access_token",t.ACCESS_TOKEN_Expire="access_token_expire",t.REFRESH_TOKEN="refresh_token",t.ANONYMOUS_UUID="anonymous_uuid",t.LOGIN_TYPE_KEY="login_type",t.protocol="undefined"!=typeof location&&"http:"===location.protocol?"http:":"https:",t.BASE_URL="//tcb-api.tencentcloudapi.com/web"}));!function(e){e.local="local",e.none="none",e.session="session"}(q||(q={}));var oe=function(){},ie=function(){},ae=Object.freeze({__proto__:null,get StorageType(){return q},AbstractSDKRequest:oe,AbstractStorage:ie,formatUrl:function(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var i in n)""===o?!r&&(t+="?"):o+="&",o+=i+"="+encodeURIComponent(n[i]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}}),se=m((function(e,t){var n=g&&g.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=g&&g.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=g&&g.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=g&&g.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(o=a.trys,!((o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.prototype.get=function(e){return this._request(r(r({},e),{method:"get"}))},t.prototype.post=function(e){return this._request(r(r({},e),{method:"post"}))},t.prototype.upload=function(e){var t=e.data,n=e.file,o=e.name,i=new FormData;for(var a in t)i.append(a,t[a]);return i.append("key",o),i.append("file",n),this._request(r(r({},e),{data:i,method:"post"}))},t.prototype.download=function(e){return o(this,void 0,void 0,(function(){var t,n;return i(this,(function(r){return t=decodeURIComponent(new URL(e.url).pathname.split("/").pop()||""),(n=document.createElement("a")).href=e.url,n.setAttribute("download",t),n.setAttribute("target","_blank"),document.body.appendChild(n),n.click(),[2,new Promise((function(t){t({statusCode:200,tempFilePath:e.url})}))]}))}))},t.prototype._request=function(e){var t=String(e.method).toLowerCase()||"get";return new Promise((function(n){var r=e.url,o=e.headers,i=void 0===o?{}:o,a=e.data,s=e.responseType,c=G.formatUrl(re.protocol,r,"get"===t?a:{}),u=new XMLHttpRequest;for(var l in u.open(t,c),s&&(u.responseType=s),i)u.setRequestHeader(l,i[l]);u.onreadystatechange=function(){if(4===u.readyState){var e={statusCode:u.status};try{e.data=JSON.parse(u.responseText)}catch(e){}n(e)}},u.send("post"===t&&G.isFormData(a)?a:JSON.stringify(a||{}))}))},t}(ae.AbstractSDKRequest);t.WebRequest=a,t.genAdapter=function(){return{root:window,reqClass:a,wsClass:WebSocket,localStorage:localStorage,sessionStorage:sessionStorage}}})),ce=m((function(e,t){var n=g&&g.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(se);!function(e){e.WEB="web",e.WX_MP="wx_mp"}(r=t.RUNTIME||(t.RUNTIME={})),t.useAdapters=function(e){for(var t=0,n=G.isArray(e)?e:[e];t<n.length;t++){var r=n[t],o=r.isMatch,i=r.genAdapter,a=r.runtime;if(o())return{adapter:i(),runtime:a}}},t.useDefaultAdapter=function(){return{adapter:o.genAdapter(),runtime:r.WEB}},t.Adapter={adapter:null,runtime:void 0}})),ue=m((function(e,t){var n=g&&g.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){switch(ce.Adapter.adapter.primaryStorage||e){case"local":this.storageClass=ce.Adapter.adapter.localStorage||new o;break;case"none":this.storageClass=new o;break;default:this.storageClass=ce.Adapter.adapter.sessionStorage||new o}}return e.prototype.setStore=function(e,t,n){try{if(!this.storageClass)return}catch(e){return}var r,o={};o.version=n||"localCachev1",o.content=t,r=JSON.stringify(o);try{this.storageClass.setItem(e,r)}catch(e){return}},e.prototype.getStore=function(e,t){try{if(!this.storageClass)return}catch(e){return""}t=t||"localCachev1";var n=this.storageClass.getItem(e);return n&&n.indexOf(t)>=0?JSON.parse(n).content:""},e.prototype.removeStore=function(e){this.storageClass.removeItem(e)},e}();t.Cache=r;var o=function(e){function t(){var t=e.call(this)||this;return ce.Adapter.adapter.root.tcbObject||(ce.Adapter.adapter.root.tcbObject={}),t}return n(t,e),t.prototype.setItem=function(e,t){ce.Adapter.adapter.root.tcbObject[e]=t},t.prototype.getItem=function(e){return ce.Adapter.adapter.root.tcbObject[e]},t.prototype.removeItem=function(e){delete ce.Adapter.adapter.root.tcbObject[e]},t.prototype.clear=function(){delete ce.Adapter.adapter.root.tcbObject},t}(ae.AbstractStorage)})),le=m((function(e,t){var n=g&&g.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=g&&g.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0});var o=function(e,t){this.data=t||null,this.name=e};t.IEvent=o;var i=function(e){function t(t,n){var r=e.call(this,"error",{error:t,data:n})||this;return r.error=t,r}return n(t,e),t}(o);t.IErrorEvent=i;var a=function(){function e(){this._listeners={}}return e.prototype.on=function(e,t){return function(e,t,n){n[e]=n[e]||[],n[e].push(t)}(e,t,this._listeners),this},e.prototype.off=function(e,t){return function(e,t,n){if(n&&n[e]){var r=n[e].indexOf(t);-1!==r&&n[e].splice(r,1)}}(e,t,this._listeners),this},e.prototype.fire=function(e,t){if(G.isInstanceOf(e,i))return console.error(e.error),this;var n=G.isString(e)?new o(e,t||{}):e,a=n.name;if(this._listens(a)){n.target=this;for(var s=0,c=this._listeners[a]?r(this._listeners[a]):[];s<c.length;s++)c[s].call(this,n)}return this},e.prototype._listens=function(e){return this._listeners[e]&&this._listeners[e].length>0},e}();t.IEventEmitter=a;var s=new a;t.addEventListener=function(e,t){s.on(e,t)},t.activateEvent=function(e,t){void 0===t&&(t={}),s.fire(e,t)},t.removeEventListener=function(e,t){s.off(e,t)},t.EVENTS={LOGIN_STATE_CHANGED:"loginStateChanged",LOGIN_STATE_EXPIRE:"loginStateExpire",LOGIN_TYPE_CHANGE:"loginTypeChanged",ANONYMOUS_CONVERTED:"anonymousConverted",REFRESH_ACCESS_TOKEN:"refreshAccessToken"}})),fe=m((function(e,t){var n=g&&g.__assign||function(){return(n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},r=g&&g.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},o=g&&g.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(o=a.trys,!((o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=["auth.getJwt","auth.logout","auth.signInWithTicket","auth.signInAnonymously"],a={"X-SDK-Version":re.SDK_VERISON};function s(e,t,r){var o=e[t];e[t]=function(t){var i={},a={};r.forEach((function(n){var r=n.call(e,t),o=r.data,s=r.headers;Object.assign(i,o),Object.assign(a,s)}));var s=t.data;return s&&function(){if(G.isFormData(s))for(var e in i)s.append(e,i[e]);else t.data=n(n({},s),i)}(),t.headers=n(n({},t.headers||{}),a),o.call(e,t)}}function c(){var e=G.genSeqId();return{data:{seqId:e},headers:n(n({},a),{"x-seqid":e})}}var u=function(){function e(e){void 0===e&&(e={}),this.config=e,this.cache=new ue.Cache(e.persistence),this.accessTokenKey=re.ACCESS_TOKEN+"_"+e.env,this.accessTokenExpireKey=re.ACCESS_TOKEN_Expire+"_"+e.env,this.refreshTokenKey=re.REFRESH_TOKEN+"_"+e.env,this.anonymousUuidKey=re.ANONYMOUS_UUID+"_"+e.env,this.loginTypeKey=re.LOGIN_TYPE_KEY+"_"+e.env,this._reqClass=new ce.Adapter.adapter.reqClass,s(this._reqClass,"post",[c]),s(this._reqClass,"upload",[c]),s(this._reqClass,"download",[c])}return e.prototype.post=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.post(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.upload=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.upload(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.download=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.download(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.refreshAccessToken=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:this._refreshAccessTokenPromise||(this._refreshAccessTokenPromise=this._refreshAccessToken()),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this._refreshAccessTokenPromise];case 2:return e=r.sent(),[3,4];case 3:return n=r.sent(),t=n,[3,4];case 4:if(this._refreshAccessTokenPromise=null,this._shouldRefreshAccessTokenHook=null,t)throw t;return[2,e]}}))}))},e.prototype._refreshAccessToken=function(){return r(this,void 0,void 0,(function(){var e,t,n,r;return o(this,(function(o){switch(o.label){case 0:if(this.cache.removeStore(this.accessTokenKey),this.cache.removeStore(this.accessTokenExpireKey),!(e=this.cache.getStore(this.refreshTokenKey)))throw new Error("[tcb-js-sdk] 未登录CloudBase");return t={refresh_token:e},this.cache.getStore(this.loginTypeKey)===pe.LOGINTYPE.ANONYMOUS&&(t.anonymous_uuid=this.cache.getStore(this.anonymousUuidKey)),[4,this.request("auth.getJwt",t)];case 1:if((n=o.sent()).data.code)throw"SIGN_PARAM_INVALID"!==(r=n.data.code)&&"REFRESH_TOKEN_EXPIRED"!==r&&"INVALID_REFRESH_TOKEN"!==r||(le.activateEvent(le.EVENTS.LOGIN_STATE_EXPIRE),this.cache.removeStore(this.refreshTokenKey)),new Error("[tcb-js-sdk] 刷新access token失败："+n.data.code);return n.data.access_token?(le.activateEvent(le.EVENTS.REFRESH_ACCESS_TOKEN),this.cache.setStore(this.accessTokenKey,n.data.access_token),this.cache.setStore(this.accessTokenExpireKey,n.data.access_token_expire+Date.now()),le.activateEvent(le.EVENTS.LOGIN_TYPE_CHANGE,n.data.login_type),[2,{accessToken:n.data.access_token,accessTokenExpire:n.data.access_token_expire}]):(n.data.refresh_token&&(this.cache.removeStore(this.refreshTokenKey),this.cache.setStore(this.refreshTokenKey,n.data.refresh_token),this._refreshAccessToken()),[2])}}))}))},e.prototype.getAccessToken=function(){return r(this,void 0,void 0,(function(){var e,t,n,r;return o(this,(function(o){switch(o.label){case 0:return e=this.cache.getStore(this.accessTokenKey),t=this.cache.getStore(this.accessTokenExpireKey),n=!0,(r=this._shouldRefreshAccessTokenHook)?[4,this._shouldRefreshAccessTokenHook(e,t)]:[3,2];case 1:r=!o.sent(),o.label=2;case 2:return r&&(n=!1),(!e||!t||t<Date.now())&&n?[2,this.refreshAccessToken()]:[2,{accessToken:e,accessTokenExpire:t}]}}))}))},e.prototype.request=function(e,t,a){return r(this,void 0,void 0,(function(){var r,s,c,u,l,f,p,d,h,v,y,g;return o(this,(function(o){switch(o.label){case 0:return r="application/x-www-form-urlencoded",s=n({action:e,env:this.config.env,dataVersion:"2019-08-16"},t),-1!==i.indexOf(e)?[3,2]:(c=s,[4,this.getAccessToken()]);case 1:c.access_token=o.sent().accessToken,o.label=2;case 2:if("storage.uploadFile"===e){for(l in u=new FormData)u.hasOwnProperty(l)&&void 0!==u[l]&&u.append(l,s[l]);r="multipart/form-data"}else r="application/json;charset=UTF-8",u=s;return f={headers:{"content-type":r}},a&&a.onUploadProgress&&(f.onUploadProgress=a.onUploadProgress),p=t.parse,d=t.query,h=t.search,v={env:this.config.env},p&&(v.parse=!0),d&&(v=n(n({},d),v)),y=G.formatUrl(re.protocol,re.BASE_URL,v),h&&(y+=h),[4,this.post(n({url:y,data:u},f))];case 3:if(g=o.sent(),200!==Number(g.status)&&200!==Number(g.statusCode)||!g.data)throw new Error("network request error");return[2,g]}}))}))},e.prototype.send=function(e,t){return void 0===t&&(t={}),r(this,void 0,void 0,(function(){var n,r,a;return o(this,(function(o){switch(o.label){case 0:return n=setTimeout((function(){console.warn("Database operation is longer than 3s. Please check query performance and your network environment.")}),3e3),[4,this.request(e,t,{onUploadProgress:t.onUploadProgress})];case 1:return r=o.sent(),clearTimeout(n),"ACCESS_TOKEN_EXPIRED"!==r.data.code||-1!==i.indexOf(e)?[3,4]:[4,this.refreshAccessToken()];case 2:return o.sent(),[4,this.request(e,t,{onUploadProgress:t.onUploadProgress})];case 3:if((a=o.sent()).data.code)throw new Error("["+a.data.code+"] "+a.data.message);return[2,a.data];case 4:if(r.data.code)throw new Error("["+r.data.code+"] "+r.data.message);return[2,r.data]}}))}))},e}();t.Request=u})),pe=m((function(e,t){var n,r=g&&g.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},o=g&&g.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(o=a.trys,!((o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.ANONYMOUS="ANONYMOUS",e.WECHAT="WECHAT",e.CUSTOM="CUSTOM",e.NULL="NULL"}(n=t.LOGINTYPE||(t.LOGINTYPE={}));var i=function(){function e(e){this._loginType=n.NULL,this.config=e,this.onLoginTypeChanged=this.onLoginTypeChanged.bind(this),le.addEventListener(le.EVENTS.LOGIN_TYPE_CHANGE,this.onLoginTypeChanged)}return e.prototype.init=function(){this.httpRequest=new fe.Request(this.config),this.cache=new ue.Cache(this.config.persistence),this.accessTokenKey=re.ACCESS_TOKEN+"_"+this.config.env,this.accessTokenExpireKey=re.ACCESS_TOKEN_Expire+"_"+this.config.env,this.refreshTokenKey=re.REFRESH_TOKEN+"_"+this.config.env,this.loginTypeKey=re.LOGIN_TYPE_KEY+"_"+this.config.env},e.prototype.onLoginTypeChanged=function(e){this._loginType=e.data,this.cache.setStore(this.loginTypeKey,this._loginType)},Object.defineProperty(e.prototype,"loginType",{get:function(){return this._loginType},enumerable:!0,configurable:!0}),e.prototype.setRefreshToken=function(e){this.cache.removeStore(this.accessTokenKey),this.cache.removeStore(this.accessTokenExpireKey),this.cache.setStore(this.refreshTokenKey,e)},e.prototype.getRefreshTokenByWXCode=function(e,t,n){return r(this,void 0,void 0,(function(){var r;return o(this,(function(o){return r=ce.Adapter.runtime===ce.RUNTIME.WX_MP?"1":"0",[2,this.httpRequest.send("auth.getJwt",{appid:e,loginType:t,code:n,hybridMiniapp:r}).then((function(e){if(e.code)throw new Error("[tcb-js-sdk] 微信登录失败: "+e.code);if(e.refresh_token)return{refreshToken:e.refresh_token,accessToken:e.access_token,accessTokenExpire:e.access_token_expire};throw new Error("[tcb-js-sdk] getJwt未返回refreshToken")}))]}))}))},e}();t.default=i})),de=m((function(e,t){var n=g&&g.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=g&&g.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},o=g&&g.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(o=a.trys,!((o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=g&&g.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a,s,c=i(G),u=i(pe);!function(e){e.snsapi_base="snsapi_base",e.snsapi_userinfo="snsapi_userinfo",e.snsapi_login="snsapi_login"}(a||(a={})),function(e){e.redirect="redirect",e.prompt="prompt"}(s||(s={}));var l={},f=function(e){function t(t,n,r,o,i){var a=e.call(this,t)||this;return a.config=t,a.appid=n,a.scope=ce.Adapter.runtime===ce.RUNTIME.WX_MP?"snsapi_base":r,a.state=i||"weixin",a.loginMode=o||"redirect",a}return n(t,e),t.prototype.signIn=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:l[this.config.env]||(l[this.config.env]=this._signIn()),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,l[this.config.env]];case 2:return e=r.sent(),[3,4];case 3:return n=r.sent(),t=n,[3,4];case 4:if(l[this.config.env]=null,t)throw t;return[2,e]}}))}))},t.prototype._signIn=function(){return r(this,void 0,void 0,(function(){var e,t,n,r,i,s;return o(this,(function(o){switch(o.label){case 0:if(e=this.cache.getStore(this.accessTokenKey),t=this.cache.getStore(this.accessTokenExpireKey),e){if(t&&t>Date.now())return[2,{credential:{accessToken:e,refreshToken:this.cache.getStore(this.refreshTokenKey)}}];this.cache.removeStore(this.accessTokenKey),this.cache.removeStore(this.accessTokenExpireKey)}if(!1===Object.values(a).includes(a[this.scope]))throw new Error("错误的scope类型");return ce.Adapter.runtime!==ce.RUNTIME.WX_MP?[3,2]:[4,c.getMiniAppCode()];case 1:return n=o.sent(),[3,4];case 2:return[4,c.getWeixinCode()];case 3:if(!(n=o.sent()))return[2,this.redirect()];o.label=4;case 4:return r=function(e){switch(e){case a.snsapi_login:return"WECHAT-OPEN";default:return"WECHAT-PUBLIC"}}(this.scope),[4,this.getRefreshTokenByWXCode(this.appid,r,n)];case 5:return i=o.sent(),s=i.refreshToken,this.cache.setStore(this.refreshTokenKey,s),i.accessToken&&this.cache.setStore(this.accessTokenKey,i.accessToken),i.accessTokenExpire&&this.cache.setStore(this.accessTokenExpireKey,i.accessTokenExpire+Date.now()),le.activateEvent(le.EVENTS.LOGIN_STATE_CHANGED),le.activateEvent(le.EVENTS.LOGIN_TYPE_CHANGE,u.LOGINTYPE.WECHAT),[2,{credential:{refreshToken:s}}]}}))}))},t.prototype.redirect=function(){var e=c.removeParam("code",location.href);e=c.removeParam("state",e),e=encodeURIComponent(e);var t="//open.weixin.qq.com/connect/oauth2/authorize";"snsapi_login"===this.scope&&(t="//open.weixin.qq.com/connect/qrconnect"),"redirect"===s[this.loginMode]&&(location.href=t+"?appid="+this.appid+"&redirect_uri="+e+"&response_type=code&scope="+this.scope+"&state="+this.state+"#wechat_redirect")},t}(u.default);t.default=f})),he=m((function(e,t){var n=g&&g.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=g&&g.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=g&&g.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=g&&g.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(o=a.trys,!((o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},a=g&&g.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var s=a(pe),c=function(e){function t(t){var n=e.call(this,r(r({},t),{persistence:"local"}))||this;return n._anonymousUuidKey=re.ANONYMOUS_UUID+"_"+n.config.env,n._loginTypeKey=re.LOGIN_TYPE_KEY+"_"+n.config.env,n}return n(t,e),t.prototype.init=function(){e.prototype.init.call(this)},t.prototype.signIn=function(){return o(this,void 0,void 0,(function(){var e,t,n;return i(this,(function(r){switch(r.label){case 0:return e=this.cache.getStore(this._anonymousUuidKey)||void 0,t=this.cache.getStore(this.refreshTokenKey)||void 0,[4,this.httpRequest.send("auth.signInAnonymously",{anonymous_uuid:e,refresh_token:t})];case 1:return(n=r.sent()).uuid&&n.refresh_token?(this._setAnonymousUUID(n.uuid),this.setRefreshToken(n.refresh_token),[4,this.httpRequest.refreshAccessToken()]):[3,3];case 2:return r.sent(),le.activateEvent(le.EVENTS.LOGIN_STATE_CHANGED),le.activateEvent(le.EVENTS.LOGIN_TYPE_CHANGE,s.LOGINTYPE.ANONYMOUS),[2,{credential:{refreshToken:n.refresh_token}}];case 3:throw new Error("[tcb-js-sdk] 匿名登录失败")}}))}))},t.prototype.linkAndRetrieveDataWithTicket=function(e){return o(this,void 0,void 0,(function(){var t,n,r;return i(this,(function(o){switch(o.label){case 0:return t=this.cache.getStore(this._anonymousUuidKey),n=this.cache.getStore(this.refreshTokenKey),[4,this.httpRequest.send("auth.linkAndRetrieveDataWithTicket",{anonymous_uuid:t,refresh_token:n,ticket:e})];case 1:return(r=o.sent()).refresh_token?(this._clearAnonymousUUID(),this.setRefreshToken(r.refresh_token),[4,this.httpRequest.refreshAccessToken()]):[3,3];case 2:return o.sent(),le.activateEvent(le.EVENTS.ANONYMOUS_CONVERTED,{refresh_token:r.refresh_token}),le.activateEvent(le.EVENTS.LOGIN_TYPE_CHANGE,s.LOGINTYPE.CUSTOM),[2,{credential:{refreshToken:r.refresh_token}}];case 3:throw new Error("[tcb-js-sdk] 匿名转化失败")}}))}))},t.prototype.getAllStore=function(){var e={};return e[this.refreshTokenKey]=this.cache.getStore(this.refreshTokenKey)||"",e[this._loginTypeKey]=this.cache.getStore(this._loginTypeKey)||"",e[this.accessTokenKey]=this.cache.getStore(this.accessTokenKey)||"",e[this.accessTokenExpireKey]=this.cache.getStore(this.accessTokenExpireKey)||"",e},t.prototype._setAnonymousUUID=function(e){this.cache.removeStore(this._anonymousUuidKey),this.cache.setStore(this._anonymousUuidKey,e),this.cache.setStore(this._loginTypeKey,s.LOGINTYPE.ANONYMOUS)},t.prototype._clearAnonymousUUID=function(){this.cache.removeStore(this._anonymousUuidKey)},t}(s.default);t.AnonymousAuthProvider=c})),ve=m((function(e,t){var n=g&&g.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=g&&g.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=g&&g.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=g&&g.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(o=a.trys,!((o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},a=g&&g.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},s=g&&g.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var c=a(de),u=s(pe),l=function(e){function t(t){var n=e.call(this,t)||this;return n.config=t,n}return n(t,e),t.prototype.init=function(){e.prototype.init.call(this),this.customAuthProvider=new u.default(this.config),this.customAuthProvider.init()},t.prototype.weixinAuthProvider=function(e){var t=e.appid,n=e.scope,r=e.loginMode,o=e.state,i=new c.default(this.config,t,n,r,o);return i.init(),i},t.prototype.signInAnonymously=function(){return o(this,void 0,void 0,(function(){var e=this;return i(this,(function(t){switch(t.label){case 0:return this._anonymousAuthProvider||(this._anonymousAuthProvider=new he.AnonymousAuthProvider(this.config),this._anonymousAuthProvider.init()),le.addEventListener(le.EVENTS.LOGIN_TYPE_CHANGE,(function(t){if(t&&t.data===u.LOGINTYPE.ANONYMOUS){var n=e._anonymousAuthProvider.getAllStore();for(var r in n)n[r]&&e.httpRequest.cache.setStore(r,n[r])}})),[4,this._anonymousAuthProvider.signIn()];case 1:return[2,t.sent()]}}))}))},t.prototype.linkAndRetrieveDataWithTicket=function(e){return o(this,void 0,void 0,(function(){var t=this;return i(this,(function(n){switch(n.label){case 0:return this._anonymousAuthProvider||(this._anonymousAuthProvider=new he.AnonymousAuthProvider(this.config),this._anonymousAuthProvider.init()),le.addEventListener(le.EVENTS.ANONYMOUS_CONVERTED,(function(e){var n=e.data.refresh_token;n&&t.httpRequest.cache.setStore(t.refreshTokenKey,n)})),[4,this._anonymousAuthProvider.linkAndRetrieveDataWithTicket(e)];case 1:return[2,n.sent()]}}))}))},t.prototype.signOut=function(){return o(this,void 0,void 0,(function(){var e,t,n,r,o,a,s;return i(this,(function(i){switch(i.label){case 0:if(this.loginType===u.LOGINTYPE.ANONYMOUS)throw new Error("[tcb-js-sdk] 匿名用户不支持登出操作");return e=this.httpRequest,t=e.cache,n=e.refreshTokenKey,r=e.accessTokenKey,o=e.accessTokenExpireKey,(a=t.getStore(n))?[4,this.httpRequest.send("auth.logout",{refresh_token:a})]:[2];case 1:return s=i.sent(),t.removeStore(n),t.removeStore(r),t.removeStore(o),le.activateEvent(le.EVENTS.LOGIN_STATE_CHANGED),le.activateEvent(le.EVENTS.LOGIN_TYPE_CHANGE,u.LOGINTYPE.NULL),[2,s]}}))}))},t.prototype.getAccessToken=function(){return o(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return e={},[4,this.httpRequest.getAccessToken()];case 1:return[2,(e.accessToken=t.sent().accessToken,e.env=this.config.env,e)]}}))}))},t.prototype.onLoginStateExpire=function(e){le.addEventListener("loginStateExpire",e)},t.prototype.getLoginState=function(){return o(this,void 0,void 0,(function(){var e,t,n,r,o;return i(this,(function(i){switch(i.label){case 0:if(e=this.httpRequest,t=e.cache,n=e.refreshTokenKey,r=e.accessTokenKey,!(o=t.getStore(n)))return[3,5];i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.httpRequest.refreshAccessToken()];case 2:return i.sent(),[3,4];case 3:return i.sent(),[2,null];case 4:return[2,{isAnonymous:this.loginType===u.LOGINTYPE.ANONYMOUS,credential:{refreshToken:o,accessToken:t.getStore(r)}}];case 5:return[2,null]}}))}))},t.prototype.signInWithTicket=function(e){return o(this,void 0,void 0,(function(){var t,n,r,o;return i(this,(function(i){switch(i.label){case 0:if("string"!=typeof e)throw new Error("ticket must be a string");return t=this.httpRequest,n=t.cache,r=t.refreshTokenKey,[4,this.httpRequest.send("auth.signInWithTicket",{ticket:e,refresh_token:n.getStore(r)||""})];case 1:return(o=i.sent()).refresh_token?(this.customAuthProvider.setRefreshToken(o.refresh_token),[4,this.httpRequest.refreshAccessToken()]):[3,3];case 2:return i.sent(),le.activateEvent(le.EVENTS.LOGIN_STATE_CHANGED),le.activateEvent(le.EVENTS.LOGIN_TYPE_CHANGE,u.LOGINTYPE.CUSTOM),[2,{credential:{refreshToken:o.refresh_token}}];case 3:throw new Error("[tcb-js-sdk] 自定义登录失败")}}))}))},t.prototype.shouldRefreshAccessToken=function(e){this.httpRequest._shouldRefreshAccessTokenHook=e.bind(this)},t.prototype.getUserInfo=function(){return this.httpRequest.send("auth.getUserInfo",{}).then((function(e){return e.code?e:r(r({},e.data),{requestId:e.seqId})}))},t}(u.default);t.default=l})),ye=m((function(e,t){var n=g&&g.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},r=g&&g.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(o=a.trys,!((o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.uploadFile=function(e,t){t=t||G.createPromiseCallback();var n=new fe.Request(this.config),r=e.cloudPath,o=e.filePath,i=e.onUploadProgress,a=e.fileType||"image";return n.send("storage.getUploadMetadata",{path:r}).then((function(e){var s=e.data,c=s.url,u=s.authorization,l=s.token,f=s.fileId,p=s.cosFileId,d=e.requestId,h={key:r,signature:u,"x-cos-meta-fileid":p,success_action_status:"201","x-cos-security-token":l};n.upload({url:c,data:h,file:o,name:r,fileType:a,onUploadProgress:i}).then((function(e){201===e.statusCode?t(null,{fileID:f,requestId:d}):t(new Error("STORAGE_REQUEST_FAIL: "+e.data))})).catch((function(e){t(e)}))})).catch((function(e){t(e)})),t.promise},t.deleteFile=function(e,t){var n=e.fileList;if(t=t||G.createPromiseCallback(),!n||!Array.isArray(n))return{code:"INVALID_PARAM",message:"fileList必须是非空的数组"};for(var r=0,o=n;r<o.length;r++){var i=o[r];if(!i||"string"!=typeof i)return{code:"INVALID_PARAM",message:"fileList的元素必须是非空的字符串"}}var a={fileid_list:n};return new fe.Request(this.config).send("storage.batchDeleteFile",a).then((function(e){e.code?t(null,e):t(null,{fileList:e.data.delete_list,requestId:e.requestId})})).catch((function(e){t(e)})),t.promise},t.getTempFileURL=function(e,t){var n=e.fileList;t=t||G.createPromiseCallback(),n&&Array.isArray(n)||t(null,{code:"INVALID_PARAM",message:"fileList必须是非空的数组"});for(var r=[],o=0,i=n;o<i.length;o++){var a=i[o];"object"==typeof a?(a.hasOwnProperty("fileID")&&a.hasOwnProperty("maxAge")||t(null,{code:"INVALID_PARAM",message:"fileList的元素必须是包含fileID和maxAge的对象"}),r.push({fileid:a.fileID,max_age:a.maxAge})):"string"==typeof a?r.push({fileid:a}):t(null,{code:"INVALID_PARAM",message:"fileList的元素必须是字符串"})}var s={file_list:r};return new fe.Request(this.config).send("storage.batchGetDownloadUrl",s).then((function(e){e.code?t(null,e):t(null,{fileList:e.data.download_list,requestId:e.requestId})})).catch((function(e){t(e)})),t.promise},t.downloadFile=function(e,o){var i=e.fileID;return n(this,void 0,void 0,(function(){var e,n,a,s,c;return r(this,(function(r){switch(r.label){case 0:return[4,t.getTempFileURL.call(this,{fileList:[{fileID:i,maxAge:600}]})];case 1:return e=r.sent(),"SUCCESS"!==(n=e.fileList[0]).code?[2,o?o(n):new Promise((function(e){e(n)}))]:(a=n.download_url,a=encodeURI(a),s=new fe.Request(this.config),o?[4,s.download({url:a})]:[3,3]);case 2:return c=r.sent(),o(c),[3,4];case 3:return[2,s.download({url:a})];case 4:return[2]}}))}))}})),ge=m((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.callFunction=function(e,t){var n,r=e.name,o=e.data,i=e.query,a=e.parse,s=e.search,c=t||G.createPromiseCallback();try{n=o?JSON.stringify(o):""}catch(e){return Promise.reject(e)}if(!r)return Promise.reject(new Error("函数名不能为空"));var u={query:i,parse:a,search:s,function_name:r,request_data:n};return new fe.Request(this.config).send("functions.invokeFunction",u).then((function(e){if(e.code)c(null,e);else{var t=e.data.response_data;if(a)c(null,{result:t,requestId:e.requestId});else try{t=JSON.parse(e.data.response_data),c(null,{result:t,requestId:e.requestId})}catch(e){c(new Error("response data must be json"))}}return c.promise})).catch((function(e){c(e)})),c.promise}})),_e=_(m((function(e){var t=g&&g.__assign||function(){return(t=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},n=g&&g.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},r=g&&g.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},o=n(H),i=n(ve),a=r(ye),s=r(ge),c={timeout:15e3},u=new(function(){function e(e){var t=this;this.config=e||this.config,this.authObj=void 0,le.addEventListener(le.EVENTS.LOGIN_TYPE_CHANGE,(function(e){e.data===pe.LOGINTYPE.ANONYMOUS&&(t.config.persistence="local")}))}return e.prototype.init=function(n){return this.config=t(t({},c),n),ce.Adapter.adapter||this._useDefaultAdapter(),new e(this.config)},e.prototype.auth=function(e){var n=(void 0===e?{}:e).persistence;return this.authObj||(this.config=t(t({},this.config),{persistence:n||ce.Adapter.adapter.primaryStorage||"session"}),this.authObj=new i.default(this.config),this.authObj.init()),this.authObj},e.prototype.on=function(e,t){return le.addEventListener.apply(this,[e,t])},e.prototype.off=function(e,t){return le.removeEventListener.apply(this,[e,t])},e.prototype.callFunction=function(e,t){return s.callFunction.apply(this,[e,t])},e.prototype.deleteFile=function(e,t){return a.deleteFile.apply(this,[e,t])},e.prototype.getTempFileURL=function(e,t){return a.getTempFileURL.apply(this,[e,t])},e.prototype.downloadFile=function(e,t){return a.downloadFile.apply(this,[e,t])},e.prototype.uploadFile=function(e,t){return a.uploadFile.apply(this,[e,t])},e.prototype.useAdapters=function(e){var t=ce.useAdapters(e)||{},n=t.adapter,r=t.runtime;n&&(ce.Adapter.adapter=n),r&&(ce.Adapter.runtime=r)},e.prototype._useDefaultAdapter=function(){var e=ce.useDefaultAdapter(),t=e.adapter,n=e.runtime;ce.Adapter.adapter=t,ce.Adapter.runtime=n},e}());u.useAdapters(o.default);try{window.tcb=u}catch(g){}e.exports=u})));_e.useAdapters(H);var me,be,we=_e,Oe=we.init;function ke(e){me||(me={PLATFORM:"mp-qq",OS:S,APPID:k.appid,CLIENT_SDK_VERSION:"1.0.0"},be={ak:k.appid,p:"android"===S?"a":"i",ut:x(),uuid:P()});var t=JSON.parse(JSON.stringify(e.data||{})),n=e.name,r=this.config.spaceId,o={tencent:"t",aliyun:"a"}[this.config.provider],i=Object.assign({},be,{fn:n,sid:r,pvd:o});Object.assign(t,{clientInfo:me,uniCloudClientInfo:encodeURIComponent(JSON.stringify(i))});var a=this.adapter.getStore("uni_id_token")||this.adapter.getStore("uniIdToken");return a&&(t.uniIdToken=a),e.data=t,e}we.init=function(e){e.env=e.spaceId;var t=Oe.call(this,e);t.config.provider="tencent",t.config.spaceId=e.spaceId;var n=t.auth;return t.auth=function(e){var t=n.call(this,e);return["linkAndRetrieveDataWithTicket","signInAnonymously","signOut","getAccessToken","getLoginState","signInWithTicket","getUserInfo"].forEach((function(e){t[e]=O(t[e]).bind(t)})),t},["uploadFile","deleteFile","getTempFileURL","downloadFile"].forEach((function(e){t[e]=O(t[e]).bind(t)})),t};var Ae={request:function(e){return r.request(e)},uploadFile:function(e){return r.uploadFile(e)},setStore:function(e,t){return r.setStorageSync(e,t)},getStore:function(e){return r.getStorageSync(e)}},Se=new(function(){function e(){a(this,e),this.adapter=Ae}return i(e,[{key:"init",value:function(e){var t={},n=!1!==e.debugFunction&&!1;switch(e.provider){case"tencent":t=we.init(Object.assign(e,{useDebugFunction:n}));break;case"aliyun":t=D.init(Object.assign(e,{useDebugFunction:n}));break;default:throw new Error("未提供正确的provider参数")}if(t.isReady=!1,!1!==e.autoSignIn){var o=t.auth();t.initSignIn=o.getLoginState().then((function(e){return e?Promise.resolve():o.signInAnonymously()})).then((function(){return new Promise((function(e){setTimeout((function(){S=r.getSystemInfoSync().platform,A=r.getStorageSync("__DC_CLOUD_UUID")||T(32),e()}),0)}))})).then((function(){t.isReady=!0}))}return function(e){var t=e.callFunction;e.callFunction=function(e){var n,r=this;return n=this.isReady?Promise.resolve():this.initSignIn,n.then((function(){var n=ke.call(r,e),o={aliyun:"aliyun",tencent:"tcb"}[r.config.provider];return new Promise((function(i,a){t.call(r,n).then((function(t){if(r.config.useDebugFunction&&t&&t.requestId){var n=JSON.stringify({spaceId:r.config.spaceId,functionName:e.name,requestId:t.requestId});console.log("[".concat(o,"-request]").concat(n,"[/").concat(o,"-request]"))}i(t)})).catch((function(t){if(r.config.useDebugFunction&&t&&t.requestId){var n=JSON.stringify({spaceId:r.config.spaceId,functionName:e.name,requestId:t.requestId});console.log("[".concat(o,"-request]").concat(n,"[/").concat(o,"-request]"))}t&&t.message&&(t.message="[".concat(e.name,"]: ").concat(t.message)),a(t)}))}))}))};var n=e.callFunction;e.callFunction=function(e){return O(n).call(this,e)}}(t),t.init=this.init,t.adapter=this.adapter,t}},{key:"setAdapter",value:function(e){this.adapter=e}}]),e}());try{var Ee={};1===[].length&&(Ee=[][0]),Se=Se.init(Ee)}catch(g){["auth","callFunction","uploadFile","deleteFile","getTempFileURL","downloadFile"].forEach((function(e){Se[e]=function(){var e=[].length>0?"应用有多个服务空间，请通过uniCloud.init方法指定要使用的服务空间":"应用未关联服务空间，请在cloudfunctions目录右键关联服务空间";return console.error(e),Promise.reject(new E({code:"SYS_ERR",message:e}))}}))}var Te=Se,Pe=Te;t.default=Pe}).call(this,n(/*! ./../../../../../webpack/buildin/global.js */3),n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},86:
/*!*****************************************************************!*\
  !*** D:/Project/HBuilderProjects/繁星/pages.json?{"type":"stat"} ***!
  \*****************************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={appid:"__UNI__75068A3"};t.default=r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,